// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bucket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bucket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bucket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bucket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bucket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bucket_2eproto;
namespace bucket {
class DataPoint;
class DataPointDefaultTypeInternal;
extern DataPointDefaultTypeInternal _DataPoint_default_instance_;
class MultipleDataPoints;
class MultipleDataPointsDefaultTypeInternal;
extern MultipleDataPointsDefaultTypeInternal _MultipleDataPoints_default_instance_;
class NearestNeighborRequest;
class NearestNeighborRequestDefaultTypeInternal;
extern NearestNeighborRequestDefaultTypeInternal _NearestNeighborRequest_default_instance_;
class NearestNeighborResponse;
class NearestNeighborResponseDefaultTypeInternal;
extern NearestNeighborResponseDefaultTypeInternal _NearestNeighborResponse_default_instance_;
class PointIdList;
class PointIdListDefaultTypeInternal;
extern PointIdListDefaultTypeInternal _PointIdList_default_instance_;
class TimingDataInMicro;
class TimingDataInMicroDefaultTypeInternal;
extern TimingDataInMicroDefaultTypeInternal _TimingDataInMicro_default_instance_;
class UtilRequest;
class UtilRequestDefaultTypeInternal;
extern UtilRequestDefaultTypeInternal _UtilRequest_default_instance_;
class UtilResponse;
class UtilResponseDefaultTypeInternal;
extern UtilResponseDefaultTypeInternal _UtilResponse_default_instance_;
}  // namespace bucket
PROTOBUF_NAMESPACE_OPEN
template<> ::bucket::DataPoint* Arena::CreateMaybeMessage<::bucket::DataPoint>(Arena*);
template<> ::bucket::MultipleDataPoints* Arena::CreateMaybeMessage<::bucket::MultipleDataPoints>(Arena*);
template<> ::bucket::NearestNeighborRequest* Arena::CreateMaybeMessage<::bucket::NearestNeighborRequest>(Arena*);
template<> ::bucket::NearestNeighborResponse* Arena::CreateMaybeMessage<::bucket::NearestNeighborResponse>(Arena*);
template<> ::bucket::PointIdList* Arena::CreateMaybeMessage<::bucket::PointIdList>(Arena*);
template<> ::bucket::TimingDataInMicro* Arena::CreateMaybeMessage<::bucket::TimingDataInMicro>(Arena*);
template<> ::bucket::UtilRequest* Arena::CreateMaybeMessage<::bucket::UtilRequest>(Arena*);
template<> ::bucket::UtilResponse* Arena::CreateMaybeMessage<::bucket::UtilResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bucket {

// ===================================================================

class DataPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bucket.DataPoint) */ {
 public:
  DataPoint();
  virtual ~DataPoint();

  DataPoint(const DataPoint& from);
  DataPoint(DataPoint&& from) noexcept
    : DataPoint() {
    *this = ::std::move(from);
  }

  inline DataPoint& operator=(const DataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPoint& operator=(DataPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataPoint* internal_default_instance() {
    return reinterpret_cast<const DataPoint*>(
               &_DataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataPoint& a, DataPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(DataPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataPoint* New() const final {
    return CreateMaybeMessage<DataPoint>(nullptr);
  }

  DataPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataPoint& from);
  void MergeFrom(const DataPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bucket.DataPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bucket_2eproto);
    return ::descriptor_table_bucket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPointFieldNumber = 1,
  };
  // repeated float data_point = 1;
  int data_point_size() const;
  private:
  int _internal_data_point_size() const;
  public:
  void clear_data_point();
  private:
  float _internal_data_point(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data_point() const;
  void _internal_add_data_point(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data_point();
  public:
  float data_point(int index) const;
  void set_data_point(int index, float value);
  void add_data_point(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data_point() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data_point();

  // @@protoc_insertion_point(class_scope:bucket.DataPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_point_;
  mutable std::atomic<int> _data_point_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bucket_2eproto;
};
// -------------------------------------------------------------------

class MultipleDataPoints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bucket.MultipleDataPoints) */ {
 public:
  MultipleDataPoints();
  virtual ~MultipleDataPoints();

  MultipleDataPoints(const MultipleDataPoints& from);
  MultipleDataPoints(MultipleDataPoints&& from) noexcept
    : MultipleDataPoints() {
    *this = ::std::move(from);
  }

  inline MultipleDataPoints& operator=(const MultipleDataPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleDataPoints& operator=(MultipleDataPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultipleDataPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultipleDataPoints* internal_default_instance() {
    return reinterpret_cast<const MultipleDataPoints*>(
               &_MultipleDataPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultipleDataPoints& a, MultipleDataPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleDataPoints* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultipleDataPoints* New() const final {
    return CreateMaybeMessage<MultipleDataPoints>(nullptr);
  }

  MultipleDataPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultipleDataPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultipleDataPoints& from);
  void MergeFrom(const MultipleDataPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultipleDataPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bucket.MultipleDataPoints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bucket_2eproto);
    return ::descriptor_table_bucket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultipleDataPointsFieldNumber = 1,
  };
  // repeated .bucket.DataPoint multiple_data_points = 1;
  int multiple_data_points_size() const;
  private:
  int _internal_multiple_data_points_size() const;
  public:
  void clear_multiple_data_points();
  ::bucket::DataPoint* mutable_multiple_data_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::DataPoint >*
      mutable_multiple_data_points();
  private:
  const ::bucket::DataPoint& _internal_multiple_data_points(int index) const;
  ::bucket::DataPoint* _internal_add_multiple_data_points();
  public:
  const ::bucket::DataPoint& multiple_data_points(int index) const;
  ::bucket::DataPoint* add_multiple_data_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::DataPoint >&
      multiple_data_points() const;

  // @@protoc_insertion_point(class_scope:bucket.MultipleDataPoints)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::DataPoint > multiple_data_points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bucket_2eproto;
};
// -------------------------------------------------------------------

class PointIdList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bucket.PointIdList) */ {
 public:
  PointIdList();
  virtual ~PointIdList();

  PointIdList(const PointIdList& from);
  PointIdList(PointIdList&& from) noexcept
    : PointIdList() {
    *this = ::std::move(from);
  }

  inline PointIdList& operator=(const PointIdList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointIdList& operator=(PointIdList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointIdList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointIdList* internal_default_instance() {
    return reinterpret_cast<const PointIdList*>(
               &_PointIdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointIdList& a, PointIdList& b) {
    a.Swap(&b);
  }
  inline void Swap(PointIdList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointIdList* New() const final {
    return CreateMaybeMessage<PointIdList>(nullptr);
  }

  PointIdList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointIdList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointIdList& from);
  void MergeFrom(const PointIdList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointIdList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bucket.PointIdList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bucket_2eproto);
    return ::descriptor_table_bucket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointIdFieldNumber = 1,
    kBucketServerIdFieldNumber = 2,
  };
  // repeated uint32 point_id = 1;
  int point_id_size() const;
  private:
  int _internal_point_id_size() const;
  public:
  void clear_point_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_point_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_point_id() const;
  void _internal_add_point_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_point_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 point_id(int index) const;
  void set_point_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_point_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      point_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_point_id();

  // uint32 bucket_server_id = 2;
  void clear_bucket_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 bucket_server_id() const;
  void set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bucket_server_id() const;
  void _internal_set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bucket.PointIdList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > point_id_;
  mutable std::atomic<int> _point_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bucket_server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bucket_2eproto;
};
// -------------------------------------------------------------------

class UtilRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bucket.UtilRequest) */ {
 public:
  UtilRequest();
  virtual ~UtilRequest();

  UtilRequest(const UtilRequest& from);
  UtilRequest(UtilRequest&& from) noexcept
    : UtilRequest() {
    *this = ::std::move(from);
  }

  inline UtilRequest& operator=(const UtilRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtilRequest& operator=(UtilRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UtilRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UtilRequest* internal_default_instance() {
    return reinterpret_cast<const UtilRequest*>(
               &_UtilRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UtilRequest& a, UtilRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UtilRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtilRequest* New() const final {
    return CreateMaybeMessage<UtilRequest>(nullptr);
  }

  UtilRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtilRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UtilRequest& from);
  void MergeFrom(const UtilRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtilRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bucket.UtilRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bucket_2eproto);
    return ::descriptor_table_bucket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtilRequestFieldNumber = 1,
  };
  // bool util_request = 1;
  void clear_util_request();
  bool util_request() const;
  void set_util_request(bool value);
  private:
  bool _internal_util_request() const;
  void _internal_set_util_request(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bucket.UtilRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool util_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bucket_2eproto;
};
// -------------------------------------------------------------------

class NearestNeighborRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bucket.NearestNeighborRequest) */ {
 public:
  NearestNeighborRequest();
  virtual ~NearestNeighborRequest();

  NearestNeighborRequest(const NearestNeighborRequest& from);
  NearestNeighborRequest(NearestNeighborRequest&& from) noexcept
    : NearestNeighborRequest() {
    *this = ::std::move(from);
  }

  inline NearestNeighborRequest& operator=(const NearestNeighborRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearestNeighborRequest& operator=(NearestNeighborRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NearestNeighborRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NearestNeighborRequest* internal_default_instance() {
    return reinterpret_cast<const NearestNeighborRequest*>(
               &_NearestNeighborRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NearestNeighborRequest& a, NearestNeighborRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NearestNeighborRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NearestNeighborRequest* New() const final {
    return CreateMaybeMessage<NearestNeighborRequest>(nullptr);
  }

  NearestNeighborRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NearestNeighborRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NearestNeighborRequest& from);
  void MergeFrom(const NearestNeighborRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearestNeighborRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bucket.NearestNeighborRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bucket_2eproto);
    return ::descriptor_table_bucket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 1,
    kMaybeNeighborListFieldNumber = 2,
    kUtilRequestFieldNumber = 6,
    kRequestedNeighborCountFieldNumber = 3,
    kBucketServerIdFieldNumber = 4,
    kRequestIdFieldNumber = 7,
    kIndexViewFieldNumber = 8,
    kShardSizeFieldNumber = 5,
  };
  // repeated uint64 queries = 1;
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_queries(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_queries() const;
  void _internal_add_queries(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_queries();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 queries(int index) const;
  void set_queries(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_queries(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      queries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_queries();

  // repeated .bucket.PointIdList maybe_neighbor_list = 2;
  int maybe_neighbor_list_size() const;
  private:
  int _internal_maybe_neighbor_list_size() const;
  public:
  void clear_maybe_neighbor_list();
  ::bucket::PointIdList* mutable_maybe_neighbor_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList >*
      mutable_maybe_neighbor_list();
  private:
  const ::bucket::PointIdList& _internal_maybe_neighbor_list(int index) const;
  ::bucket::PointIdList* _internal_add_maybe_neighbor_list();
  public:
  const ::bucket::PointIdList& maybe_neighbor_list(int index) const;
  ::bucket::PointIdList* add_maybe_neighbor_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList >&
      maybe_neighbor_list() const;

  // .bucket.UtilRequest util_request = 6;
  bool has_util_request() const;
  private:
  bool _internal_has_util_request() const;
  public:
  void clear_util_request();
  const ::bucket::UtilRequest& util_request() const;
  ::bucket::UtilRequest* release_util_request();
  ::bucket::UtilRequest* mutable_util_request();
  void set_allocated_util_request(::bucket::UtilRequest* util_request);
  private:
  const ::bucket::UtilRequest& _internal_util_request() const;
  ::bucket::UtilRequest* _internal_mutable_util_request();
  public:

  // uint32 requested_neighbor_count = 3;
  void clear_requested_neighbor_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 requested_neighbor_count() const;
  void set_requested_neighbor_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requested_neighbor_count() const;
  void _internal_set_requested_neighbor_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bucket_server_id = 4;
  void clear_bucket_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 bucket_server_id() const;
  void set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bucket_server_id() const;
  void _internal_set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 request_id = 7;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 index_view = 8;
  void clear_index_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 index_view() const;
  void set_index_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index_view() const;
  void _internal_set_index_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 shard_size = 5;
  void clear_shard_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 shard_size() const;
  void set_shard_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shard_size() const;
  void _internal_set_shard_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bucket.NearestNeighborRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > queries_;
  mutable std::atomic<int> _queries_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList > maybe_neighbor_list_;
  ::bucket::UtilRequest* util_request_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requested_neighbor_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bucket_server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_view_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shard_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bucket_2eproto;
};
// -------------------------------------------------------------------

class TimingDataInMicro :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bucket.TimingDataInMicro) */ {
 public:
  TimingDataInMicro();
  virtual ~TimingDataInMicro();

  TimingDataInMicro(const TimingDataInMicro& from);
  TimingDataInMicro(TimingDataInMicro&& from) noexcept
    : TimingDataInMicro() {
    *this = ::std::move(from);
  }

  inline TimingDataInMicro& operator=(const TimingDataInMicro& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimingDataInMicro& operator=(TimingDataInMicro&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimingDataInMicro& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimingDataInMicro* internal_default_instance() {
    return reinterpret_cast<const TimingDataInMicro*>(
               &_TimingDataInMicro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TimingDataInMicro& a, TimingDataInMicro& b) {
    a.Swap(&b);
  }
  inline void Swap(TimingDataInMicro* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimingDataInMicro* New() const final {
    return CreateMaybeMessage<TimingDataInMicro>(nullptr);
  }

  TimingDataInMicro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimingDataInMicro>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimingDataInMicro& from);
  void MergeFrom(const TimingDataInMicro& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimingDataInMicro* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bucket.TimingDataInMicro";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bucket_2eproto);
    return ::descriptor_table_bucket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnpackBucketReqTimeInMicroFieldNumber = 1,
    kCalculateKnnTimeInMicroFieldNumber = 2,
    kPackBucketRespTimeInMicroFieldNumber = 3,
    kCpuUtilFieldNumber = 4,
  };
  // uint64 unpack_bucket_req_time_in_micro = 1;
  void clear_unpack_bucket_req_time_in_micro();
  ::PROTOBUF_NAMESPACE_ID::uint64 unpack_bucket_req_time_in_micro() const;
  void set_unpack_bucket_req_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_unpack_bucket_req_time_in_micro() const;
  void _internal_set_unpack_bucket_req_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 calculate_knn_time_in_micro = 2;
  void clear_calculate_knn_time_in_micro();
  ::PROTOBUF_NAMESPACE_ID::uint64 calculate_knn_time_in_micro() const;
  void set_calculate_knn_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_calculate_knn_time_in_micro() const;
  void _internal_set_calculate_knn_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pack_bucket_resp_time_in_micro = 3;
  void clear_pack_bucket_resp_time_in_micro();
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_bucket_resp_time_in_micro() const;
  void set_pack_bucket_resp_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pack_bucket_resp_time_in_micro() const;
  void _internal_set_pack_bucket_resp_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float cpu_util = 4;
  void clear_cpu_util();
  float cpu_util() const;
  void set_cpu_util(float value);
  private:
  float _internal_cpu_util() const;
  void _internal_set_cpu_util(float value);
  public:

  // @@protoc_insertion_point(class_scope:bucket.TimingDataInMicro)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 unpack_bucket_req_time_in_micro_;
  ::PROTOBUF_NAMESPACE_ID::uint64 calculate_knn_time_in_micro_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pack_bucket_resp_time_in_micro_;
  float cpu_util_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bucket_2eproto;
};
// -------------------------------------------------------------------

class UtilResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bucket.UtilResponse) */ {
 public:
  UtilResponse();
  virtual ~UtilResponse();

  UtilResponse(const UtilResponse& from);
  UtilResponse(UtilResponse&& from) noexcept
    : UtilResponse() {
    *this = ::std::move(from);
  }

  inline UtilResponse& operator=(const UtilResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UtilResponse& operator=(UtilResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UtilResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UtilResponse* internal_default_instance() {
    return reinterpret_cast<const UtilResponse*>(
               &_UtilResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UtilResponse& a, UtilResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UtilResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UtilResponse* New() const final {
    return CreateMaybeMessage<UtilResponse>(nullptr);
  }

  UtilResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UtilResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UtilResponse& from);
  void MergeFrom(const UtilResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UtilResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bucket.UtilResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bucket_2eproto);
    return ::descriptor_table_bucket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserTimeFieldNumber = 2,
    kSystemTimeFieldNumber = 3,
    kIoTimeFieldNumber = 4,
    kIdleTimeFieldNumber = 5,
    kUtilPresentFieldNumber = 1,
  };
  // uint64 user_time = 2;
  void clear_user_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_time() const;
  void set_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_time() const;
  void _internal_set_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 system_time = 3;
  void clear_system_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 system_time() const;
  void set_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_system_time() const;
  void _internal_set_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 io_time = 4;
  void clear_io_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 io_time() const;
  void set_io_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_io_time() const;
  void _internal_set_io_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 idle_time = 5;
  void clear_idle_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 idle_time() const;
  void set_idle_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_idle_time() const;
  void _internal_set_idle_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool util_present = 1;
  void clear_util_present();
  bool util_present() const;
  void set_util_present(bool value);
  private:
  bool _internal_util_present() const;
  void _internal_set_util_present(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bucket.UtilResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 system_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 io_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 idle_time_;
  bool util_present_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bucket_2eproto;
};
// -------------------------------------------------------------------

class NearestNeighborResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bucket.NearestNeighborResponse) */ {
 public:
  NearestNeighborResponse();
  virtual ~NearestNeighborResponse();

  NearestNeighborResponse(const NearestNeighborResponse& from);
  NearestNeighborResponse(NearestNeighborResponse&& from) noexcept
    : NearestNeighborResponse() {
    *this = ::std::move(from);
  }

  inline NearestNeighborResponse& operator=(const NearestNeighborResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearestNeighborResponse& operator=(NearestNeighborResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NearestNeighborResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NearestNeighborResponse* internal_default_instance() {
    return reinterpret_cast<const NearestNeighborResponse*>(
               &_NearestNeighborResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NearestNeighborResponse& a, NearestNeighborResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NearestNeighborResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NearestNeighborResponse* New() const final {
    return CreateMaybeMessage<NearestNeighborResponse>(nullptr);
  }

  NearestNeighborResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NearestNeighborResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NearestNeighborResponse& from);
  void MergeFrom(const NearestNeighborResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearestNeighborResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bucket.NearestNeighborResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bucket_2eproto);
    return ::descriptor_table_bucket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborIdsFieldNumber = 1,
    kQueriesFieldNumber = 2,
    kTimingDataInMicroFieldNumber = 3,
    kUtilResponseFieldNumber = 4,
    kRequestIdFieldNumber = 5,
    kRecvStampFieldNumber = 6,
    kSendStampFieldNumber = 7,
    kIndexViewFieldNumber = 8,
    kBucketServerIdFieldNumber = 9,
  };
  // repeated .bucket.PointIdList neighbor_ids = 1;
  int neighbor_ids_size() const;
  private:
  int _internal_neighbor_ids_size() const;
  public:
  void clear_neighbor_ids();
  ::bucket::PointIdList* mutable_neighbor_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList >*
      mutable_neighbor_ids();
  private:
  const ::bucket::PointIdList& _internal_neighbor_ids(int index) const;
  ::bucket::PointIdList* _internal_add_neighbor_ids();
  public:
  const ::bucket::PointIdList& neighbor_ids(int index) const;
  ::bucket::PointIdList* add_neighbor_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList >&
      neighbor_ids() const;

  // repeated uint64 queries = 2;
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_queries(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_queries() const;
  void _internal_add_queries(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_queries();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 queries(int index) const;
  void set_queries(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_queries(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      queries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_queries();

  // .bucket.TimingDataInMicro timing_data_in_micro = 3;
  bool has_timing_data_in_micro() const;
  private:
  bool _internal_has_timing_data_in_micro() const;
  public:
  void clear_timing_data_in_micro();
  const ::bucket::TimingDataInMicro& timing_data_in_micro() const;
  ::bucket::TimingDataInMicro* release_timing_data_in_micro();
  ::bucket::TimingDataInMicro* mutable_timing_data_in_micro();
  void set_allocated_timing_data_in_micro(::bucket::TimingDataInMicro* timing_data_in_micro);
  private:
  const ::bucket::TimingDataInMicro& _internal_timing_data_in_micro() const;
  ::bucket::TimingDataInMicro* _internal_mutable_timing_data_in_micro();
  public:

  // .bucket.UtilResponse util_response = 4;
  bool has_util_response() const;
  private:
  bool _internal_has_util_response() const;
  public:
  void clear_util_response();
  const ::bucket::UtilResponse& util_response() const;
  ::bucket::UtilResponse* release_util_response();
  ::bucket::UtilResponse* mutable_util_response();
  void set_allocated_util_response(::bucket::UtilResponse* util_response);
  private:
  const ::bucket::UtilResponse& _internal_util_response() const;
  ::bucket::UtilResponse* _internal_mutable_util_response();
  public:

  // uint64 request_id = 5;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 recv_stamp = 6;
  void clear_recv_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 recv_stamp() const;
  void set_recv_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_recv_stamp() const;
  void _internal_set_recv_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 send_stamp = 7;
  void clear_send_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 send_stamp() const;
  void set_send_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_send_stamp() const;
  void _internal_set_send_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 index_view = 8;
  void clear_index_view();
  ::PROTOBUF_NAMESPACE_ID::uint64 index_view() const;
  void set_index_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index_view() const;
  void _internal_set_index_view(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 bucket_server_id = 9;
  void clear_bucket_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 bucket_server_id() const;
  void set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bucket_server_id() const;
  void _internal_set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bucket.NearestNeighborResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList > neighbor_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > queries_;
  mutable std::atomic<int> _queries_cached_byte_size_;
  ::bucket::TimingDataInMicro* timing_data_in_micro_;
  ::bucket::UtilResponse* util_response_;
  ::PROTOBUF_NAMESPACE_ID::uint64 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recv_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 send_stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_view_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bucket_server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bucket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataPoint

// repeated float data_point = 1;
inline int DataPoint::_internal_data_point_size() const {
  return data_point_.size();
}
inline int DataPoint::data_point_size() const {
  return _internal_data_point_size();
}
inline void DataPoint::clear_data_point() {
  data_point_.Clear();
}
inline float DataPoint::_internal_data_point(int index) const {
  return data_point_.Get(index);
}
inline float DataPoint::data_point(int index) const {
  // @@protoc_insertion_point(field_get:bucket.DataPoint.data_point)
  return _internal_data_point(index);
}
inline void DataPoint::set_data_point(int index, float value) {
  data_point_.Set(index, value);
  // @@protoc_insertion_point(field_set:bucket.DataPoint.data_point)
}
inline void DataPoint::_internal_add_data_point(float value) {
  data_point_.Add(value);
}
inline void DataPoint::add_data_point(float value) {
  _internal_add_data_point(value);
  // @@protoc_insertion_point(field_add:bucket.DataPoint.data_point)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DataPoint::_internal_data_point() const {
  return data_point_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DataPoint::data_point() const {
  // @@protoc_insertion_point(field_list:bucket.DataPoint.data_point)
  return _internal_data_point();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DataPoint::_internal_mutable_data_point() {
  return &data_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DataPoint::mutable_data_point() {
  // @@protoc_insertion_point(field_mutable_list:bucket.DataPoint.data_point)
  return _internal_mutable_data_point();
}

// -------------------------------------------------------------------

// MultipleDataPoints

// repeated .bucket.DataPoint multiple_data_points = 1;
inline int MultipleDataPoints::_internal_multiple_data_points_size() const {
  return multiple_data_points_.size();
}
inline int MultipleDataPoints::multiple_data_points_size() const {
  return _internal_multiple_data_points_size();
}
inline void MultipleDataPoints::clear_multiple_data_points() {
  multiple_data_points_.Clear();
}
inline ::bucket::DataPoint* MultipleDataPoints::mutable_multiple_data_points(int index) {
  // @@protoc_insertion_point(field_mutable:bucket.MultipleDataPoints.multiple_data_points)
  return multiple_data_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::DataPoint >*
MultipleDataPoints::mutable_multiple_data_points() {
  // @@protoc_insertion_point(field_mutable_list:bucket.MultipleDataPoints.multiple_data_points)
  return &multiple_data_points_;
}
inline const ::bucket::DataPoint& MultipleDataPoints::_internal_multiple_data_points(int index) const {
  return multiple_data_points_.Get(index);
}
inline const ::bucket::DataPoint& MultipleDataPoints::multiple_data_points(int index) const {
  // @@protoc_insertion_point(field_get:bucket.MultipleDataPoints.multiple_data_points)
  return _internal_multiple_data_points(index);
}
inline ::bucket::DataPoint* MultipleDataPoints::_internal_add_multiple_data_points() {
  return multiple_data_points_.Add();
}
inline ::bucket::DataPoint* MultipleDataPoints::add_multiple_data_points() {
  // @@protoc_insertion_point(field_add:bucket.MultipleDataPoints.multiple_data_points)
  return _internal_add_multiple_data_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::DataPoint >&
MultipleDataPoints::multiple_data_points() const {
  // @@protoc_insertion_point(field_list:bucket.MultipleDataPoints.multiple_data_points)
  return multiple_data_points_;
}

// -------------------------------------------------------------------

// PointIdList

// repeated uint32 point_id = 1;
inline int PointIdList::_internal_point_id_size() const {
  return point_id_.size();
}
inline int PointIdList::point_id_size() const {
  return _internal_point_id_size();
}
inline void PointIdList::clear_point_id() {
  point_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointIdList::_internal_point_id(int index) const {
  return point_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointIdList::point_id(int index) const {
  // @@protoc_insertion_point(field_get:bucket.PointIdList.point_id)
  return _internal_point_id(index);
}
inline void PointIdList::set_point_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  point_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:bucket.PointIdList.point_id)
}
inline void PointIdList::_internal_add_point_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  point_id_.Add(value);
}
inline void PointIdList::add_point_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_point_id(value);
  // @@protoc_insertion_point(field_add:bucket.PointIdList.point_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointIdList::_internal_point_id() const {
  return point_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PointIdList::point_id() const {
  // @@protoc_insertion_point(field_list:bucket.PointIdList.point_id)
  return _internal_point_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointIdList::_internal_mutable_point_id() {
  return &point_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PointIdList::mutable_point_id() {
  // @@protoc_insertion_point(field_mutable_list:bucket.PointIdList.point_id)
  return _internal_mutable_point_id();
}

// uint32 bucket_server_id = 2;
inline void PointIdList::clear_bucket_server_id() {
  bucket_server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointIdList::_internal_bucket_server_id() const {
  return bucket_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PointIdList::bucket_server_id() const {
  // @@protoc_insertion_point(field_get:bucket.PointIdList.bucket_server_id)
  return _internal_bucket_server_id();
}
inline void PointIdList::_internal_set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bucket_server_id_ = value;
}
inline void PointIdList::set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bucket_server_id(value);
  // @@protoc_insertion_point(field_set:bucket.PointIdList.bucket_server_id)
}

// -------------------------------------------------------------------

// UtilRequest

// bool util_request = 1;
inline void UtilRequest::clear_util_request() {
  util_request_ = false;
}
inline bool UtilRequest::_internal_util_request() const {
  return util_request_;
}
inline bool UtilRequest::util_request() const {
  // @@protoc_insertion_point(field_get:bucket.UtilRequest.util_request)
  return _internal_util_request();
}
inline void UtilRequest::_internal_set_util_request(bool value) {
  
  util_request_ = value;
}
inline void UtilRequest::set_util_request(bool value) {
  _internal_set_util_request(value);
  // @@protoc_insertion_point(field_set:bucket.UtilRequest.util_request)
}

// -------------------------------------------------------------------

// NearestNeighborRequest

// repeated uint64 queries = 1;
inline int NearestNeighborRequest::_internal_queries_size() const {
  return queries_.size();
}
inline int NearestNeighborRequest::queries_size() const {
  return _internal_queries_size();
}
inline void NearestNeighborRequest::clear_queries() {
  queries_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborRequest::_internal_queries(int index) const {
  return queries_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborRequest::queries(int index) const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborRequest.queries)
  return _internal_queries(index);
}
inline void NearestNeighborRequest::set_queries(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  queries_.Set(index, value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborRequest.queries)
}
inline void NearestNeighborRequest::_internal_add_queries(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  queries_.Add(value);
}
inline void NearestNeighborRequest::add_queries(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_queries(value);
  // @@protoc_insertion_point(field_add:bucket.NearestNeighborRequest.queries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NearestNeighborRequest::_internal_queries() const {
  return queries_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NearestNeighborRequest::queries() const {
  // @@protoc_insertion_point(field_list:bucket.NearestNeighborRequest.queries)
  return _internal_queries();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NearestNeighborRequest::_internal_mutable_queries() {
  return &queries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NearestNeighborRequest::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:bucket.NearestNeighborRequest.queries)
  return _internal_mutable_queries();
}

// repeated .bucket.PointIdList maybe_neighbor_list = 2;
inline int NearestNeighborRequest::_internal_maybe_neighbor_list_size() const {
  return maybe_neighbor_list_.size();
}
inline int NearestNeighborRequest::maybe_neighbor_list_size() const {
  return _internal_maybe_neighbor_list_size();
}
inline void NearestNeighborRequest::clear_maybe_neighbor_list() {
  maybe_neighbor_list_.Clear();
}
inline ::bucket::PointIdList* NearestNeighborRequest::mutable_maybe_neighbor_list(int index) {
  // @@protoc_insertion_point(field_mutable:bucket.NearestNeighborRequest.maybe_neighbor_list)
  return maybe_neighbor_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList >*
NearestNeighborRequest::mutable_maybe_neighbor_list() {
  // @@protoc_insertion_point(field_mutable_list:bucket.NearestNeighborRequest.maybe_neighbor_list)
  return &maybe_neighbor_list_;
}
inline const ::bucket::PointIdList& NearestNeighborRequest::_internal_maybe_neighbor_list(int index) const {
  return maybe_neighbor_list_.Get(index);
}
inline const ::bucket::PointIdList& NearestNeighborRequest::maybe_neighbor_list(int index) const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborRequest.maybe_neighbor_list)
  return _internal_maybe_neighbor_list(index);
}
inline ::bucket::PointIdList* NearestNeighborRequest::_internal_add_maybe_neighbor_list() {
  return maybe_neighbor_list_.Add();
}
inline ::bucket::PointIdList* NearestNeighborRequest::add_maybe_neighbor_list() {
  // @@protoc_insertion_point(field_add:bucket.NearestNeighborRequest.maybe_neighbor_list)
  return _internal_add_maybe_neighbor_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList >&
NearestNeighborRequest::maybe_neighbor_list() const {
  // @@protoc_insertion_point(field_list:bucket.NearestNeighborRequest.maybe_neighbor_list)
  return maybe_neighbor_list_;
}

// uint32 requested_neighbor_count = 3;
inline void NearestNeighborRequest::clear_requested_neighbor_count() {
  requested_neighbor_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearestNeighborRequest::_internal_requested_neighbor_count() const {
  return requested_neighbor_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearestNeighborRequest::requested_neighbor_count() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborRequest.requested_neighbor_count)
  return _internal_requested_neighbor_count();
}
inline void NearestNeighborRequest::_internal_set_requested_neighbor_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  requested_neighbor_count_ = value;
}
inline void NearestNeighborRequest::set_requested_neighbor_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requested_neighbor_count(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborRequest.requested_neighbor_count)
}

// uint32 bucket_server_id = 4;
inline void NearestNeighborRequest::clear_bucket_server_id() {
  bucket_server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearestNeighborRequest::_internal_bucket_server_id() const {
  return bucket_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearestNeighborRequest::bucket_server_id() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborRequest.bucket_server_id)
  return _internal_bucket_server_id();
}
inline void NearestNeighborRequest::_internal_set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bucket_server_id_ = value;
}
inline void NearestNeighborRequest::set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bucket_server_id(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborRequest.bucket_server_id)
}

// uint32 shard_size = 5;
inline void NearestNeighborRequest::clear_shard_size() {
  shard_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearestNeighborRequest::_internal_shard_size() const {
  return shard_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearestNeighborRequest::shard_size() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborRequest.shard_size)
  return _internal_shard_size();
}
inline void NearestNeighborRequest::_internal_set_shard_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shard_size_ = value;
}
inline void NearestNeighborRequest::set_shard_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shard_size(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborRequest.shard_size)
}

// .bucket.UtilRequest util_request = 6;
inline bool NearestNeighborRequest::_internal_has_util_request() const {
  return this != internal_default_instance() && util_request_ != nullptr;
}
inline bool NearestNeighborRequest::has_util_request() const {
  return _internal_has_util_request();
}
inline void NearestNeighborRequest::clear_util_request() {
  if (GetArenaNoVirtual() == nullptr && util_request_ != nullptr) {
    delete util_request_;
  }
  util_request_ = nullptr;
}
inline const ::bucket::UtilRequest& NearestNeighborRequest::_internal_util_request() const {
  const ::bucket::UtilRequest* p = util_request_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bucket::UtilRequest*>(
      &::bucket::_UtilRequest_default_instance_);
}
inline const ::bucket::UtilRequest& NearestNeighborRequest::util_request() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborRequest.util_request)
  return _internal_util_request();
}
inline ::bucket::UtilRequest* NearestNeighborRequest::release_util_request() {
  // @@protoc_insertion_point(field_release:bucket.NearestNeighborRequest.util_request)
  
  ::bucket::UtilRequest* temp = util_request_;
  util_request_ = nullptr;
  return temp;
}
inline ::bucket::UtilRequest* NearestNeighborRequest::_internal_mutable_util_request() {
  
  if (util_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::bucket::UtilRequest>(GetArenaNoVirtual());
    util_request_ = p;
  }
  return util_request_;
}
inline ::bucket::UtilRequest* NearestNeighborRequest::mutable_util_request() {
  // @@protoc_insertion_point(field_mutable:bucket.NearestNeighborRequest.util_request)
  return _internal_mutable_util_request();
}
inline void NearestNeighborRequest::set_allocated_util_request(::bucket::UtilRequest* util_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete util_request_;
  }
  if (util_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      util_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, util_request, submessage_arena);
    }
    
  } else {
    
  }
  util_request_ = util_request;
  // @@protoc_insertion_point(field_set_allocated:bucket.NearestNeighborRequest.util_request)
}

// uint64 request_id = 7;
inline void NearestNeighborRequest::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborRequest::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborRequest::request_id() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborRequest.request_id)
  return _internal_request_id();
}
inline void NearestNeighborRequest::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void NearestNeighborRequest::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborRequest.request_id)
}

// uint64 index_view = 8;
inline void NearestNeighborRequest::clear_index_view() {
  index_view_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborRequest::_internal_index_view() const {
  return index_view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborRequest::index_view() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborRequest.index_view)
  return _internal_index_view();
}
inline void NearestNeighborRequest::_internal_set_index_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_view_ = value;
}
inline void NearestNeighborRequest::set_index_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index_view(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborRequest.index_view)
}

// -------------------------------------------------------------------

// TimingDataInMicro

// uint64 unpack_bucket_req_time_in_micro = 1;
inline void TimingDataInMicro::clear_unpack_bucket_req_time_in_micro() {
  unpack_bucket_req_time_in_micro_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingDataInMicro::_internal_unpack_bucket_req_time_in_micro() const {
  return unpack_bucket_req_time_in_micro_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingDataInMicro::unpack_bucket_req_time_in_micro() const {
  // @@protoc_insertion_point(field_get:bucket.TimingDataInMicro.unpack_bucket_req_time_in_micro)
  return _internal_unpack_bucket_req_time_in_micro();
}
inline void TimingDataInMicro::_internal_set_unpack_bucket_req_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  unpack_bucket_req_time_in_micro_ = value;
}
inline void TimingDataInMicro::set_unpack_bucket_req_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_unpack_bucket_req_time_in_micro(value);
  // @@protoc_insertion_point(field_set:bucket.TimingDataInMicro.unpack_bucket_req_time_in_micro)
}

// uint64 calculate_knn_time_in_micro = 2;
inline void TimingDataInMicro::clear_calculate_knn_time_in_micro() {
  calculate_knn_time_in_micro_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingDataInMicro::_internal_calculate_knn_time_in_micro() const {
  return calculate_knn_time_in_micro_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingDataInMicro::calculate_knn_time_in_micro() const {
  // @@protoc_insertion_point(field_get:bucket.TimingDataInMicro.calculate_knn_time_in_micro)
  return _internal_calculate_knn_time_in_micro();
}
inline void TimingDataInMicro::_internal_set_calculate_knn_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  calculate_knn_time_in_micro_ = value;
}
inline void TimingDataInMicro::set_calculate_knn_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_calculate_knn_time_in_micro(value);
  // @@protoc_insertion_point(field_set:bucket.TimingDataInMicro.calculate_knn_time_in_micro)
}

// uint64 pack_bucket_resp_time_in_micro = 3;
inline void TimingDataInMicro::clear_pack_bucket_resp_time_in_micro() {
  pack_bucket_resp_time_in_micro_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingDataInMicro::_internal_pack_bucket_resp_time_in_micro() const {
  return pack_bucket_resp_time_in_micro_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimingDataInMicro::pack_bucket_resp_time_in_micro() const {
  // @@protoc_insertion_point(field_get:bucket.TimingDataInMicro.pack_bucket_resp_time_in_micro)
  return _internal_pack_bucket_resp_time_in_micro();
}
inline void TimingDataInMicro::_internal_set_pack_bucket_resp_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pack_bucket_resp_time_in_micro_ = value;
}
inline void TimingDataInMicro::set_pack_bucket_resp_time_in_micro(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pack_bucket_resp_time_in_micro(value);
  // @@protoc_insertion_point(field_set:bucket.TimingDataInMicro.pack_bucket_resp_time_in_micro)
}

// float cpu_util = 4;
inline void TimingDataInMicro::clear_cpu_util() {
  cpu_util_ = 0;
}
inline float TimingDataInMicro::_internal_cpu_util() const {
  return cpu_util_;
}
inline float TimingDataInMicro::cpu_util() const {
  // @@protoc_insertion_point(field_get:bucket.TimingDataInMicro.cpu_util)
  return _internal_cpu_util();
}
inline void TimingDataInMicro::_internal_set_cpu_util(float value) {
  
  cpu_util_ = value;
}
inline void TimingDataInMicro::set_cpu_util(float value) {
  _internal_set_cpu_util(value);
  // @@protoc_insertion_point(field_set:bucket.TimingDataInMicro.cpu_util)
}

// -------------------------------------------------------------------

// UtilResponse

// bool util_present = 1;
inline void UtilResponse::clear_util_present() {
  util_present_ = false;
}
inline bool UtilResponse::_internal_util_present() const {
  return util_present_;
}
inline bool UtilResponse::util_present() const {
  // @@protoc_insertion_point(field_get:bucket.UtilResponse.util_present)
  return _internal_util_present();
}
inline void UtilResponse::_internal_set_util_present(bool value) {
  
  util_present_ = value;
}
inline void UtilResponse::set_util_present(bool value) {
  _internal_set_util_present(value);
  // @@protoc_insertion_point(field_set:bucket.UtilResponse.util_present)
}

// uint64 user_time = 2;
inline void UtilResponse::clear_user_time() {
  user_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UtilResponse::_internal_user_time() const {
  return user_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UtilResponse::user_time() const {
  // @@protoc_insertion_point(field_get:bucket.UtilResponse.user_time)
  return _internal_user_time();
}
inline void UtilResponse::_internal_set_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_time_ = value;
}
inline void UtilResponse::set_user_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_time(value);
  // @@protoc_insertion_point(field_set:bucket.UtilResponse.user_time)
}

// uint64 system_time = 3;
inline void UtilResponse::clear_system_time() {
  system_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UtilResponse::_internal_system_time() const {
  return system_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UtilResponse::system_time() const {
  // @@protoc_insertion_point(field_get:bucket.UtilResponse.system_time)
  return _internal_system_time();
}
inline void UtilResponse::_internal_set_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  system_time_ = value;
}
inline void UtilResponse::set_system_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_system_time(value);
  // @@protoc_insertion_point(field_set:bucket.UtilResponse.system_time)
}

// uint64 io_time = 4;
inline void UtilResponse::clear_io_time() {
  io_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UtilResponse::_internal_io_time() const {
  return io_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UtilResponse::io_time() const {
  // @@protoc_insertion_point(field_get:bucket.UtilResponse.io_time)
  return _internal_io_time();
}
inline void UtilResponse::_internal_set_io_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  io_time_ = value;
}
inline void UtilResponse::set_io_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_io_time(value);
  // @@protoc_insertion_point(field_set:bucket.UtilResponse.io_time)
}

// uint64 idle_time = 5;
inline void UtilResponse::clear_idle_time() {
  idle_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UtilResponse::_internal_idle_time() const {
  return idle_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UtilResponse::idle_time() const {
  // @@protoc_insertion_point(field_get:bucket.UtilResponse.idle_time)
  return _internal_idle_time();
}
inline void UtilResponse::_internal_set_idle_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  idle_time_ = value;
}
inline void UtilResponse::set_idle_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_idle_time(value);
  // @@protoc_insertion_point(field_set:bucket.UtilResponse.idle_time)
}

// -------------------------------------------------------------------

// NearestNeighborResponse

// repeated .bucket.PointIdList neighbor_ids = 1;
inline int NearestNeighborResponse::_internal_neighbor_ids_size() const {
  return neighbor_ids_.size();
}
inline int NearestNeighborResponse::neighbor_ids_size() const {
  return _internal_neighbor_ids_size();
}
inline void NearestNeighborResponse::clear_neighbor_ids() {
  neighbor_ids_.Clear();
}
inline ::bucket::PointIdList* NearestNeighborResponse::mutable_neighbor_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bucket.NearestNeighborResponse.neighbor_ids)
  return neighbor_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList >*
NearestNeighborResponse::mutable_neighbor_ids() {
  // @@protoc_insertion_point(field_mutable_list:bucket.NearestNeighborResponse.neighbor_ids)
  return &neighbor_ids_;
}
inline const ::bucket::PointIdList& NearestNeighborResponse::_internal_neighbor_ids(int index) const {
  return neighbor_ids_.Get(index);
}
inline const ::bucket::PointIdList& NearestNeighborResponse::neighbor_ids(int index) const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.neighbor_ids)
  return _internal_neighbor_ids(index);
}
inline ::bucket::PointIdList* NearestNeighborResponse::_internal_add_neighbor_ids() {
  return neighbor_ids_.Add();
}
inline ::bucket::PointIdList* NearestNeighborResponse::add_neighbor_ids() {
  // @@protoc_insertion_point(field_add:bucket.NearestNeighborResponse.neighbor_ids)
  return _internal_add_neighbor_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bucket::PointIdList >&
NearestNeighborResponse::neighbor_ids() const {
  // @@protoc_insertion_point(field_list:bucket.NearestNeighborResponse.neighbor_ids)
  return neighbor_ids_;
}

// repeated uint64 queries = 2;
inline int NearestNeighborResponse::_internal_queries_size() const {
  return queries_.size();
}
inline int NearestNeighborResponse::queries_size() const {
  return _internal_queries_size();
}
inline void NearestNeighborResponse::clear_queries() {
  queries_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::_internal_queries(int index) const {
  return queries_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::queries(int index) const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.queries)
  return _internal_queries(index);
}
inline void NearestNeighborResponse::set_queries(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  queries_.Set(index, value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborResponse.queries)
}
inline void NearestNeighborResponse::_internal_add_queries(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  queries_.Add(value);
}
inline void NearestNeighborResponse::add_queries(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_queries(value);
  // @@protoc_insertion_point(field_add:bucket.NearestNeighborResponse.queries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NearestNeighborResponse::_internal_queries() const {
  return queries_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NearestNeighborResponse::queries() const {
  // @@protoc_insertion_point(field_list:bucket.NearestNeighborResponse.queries)
  return _internal_queries();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NearestNeighborResponse::_internal_mutable_queries() {
  return &queries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NearestNeighborResponse::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:bucket.NearestNeighborResponse.queries)
  return _internal_mutable_queries();
}

// .bucket.TimingDataInMicro timing_data_in_micro = 3;
inline bool NearestNeighborResponse::_internal_has_timing_data_in_micro() const {
  return this != internal_default_instance() && timing_data_in_micro_ != nullptr;
}
inline bool NearestNeighborResponse::has_timing_data_in_micro() const {
  return _internal_has_timing_data_in_micro();
}
inline void NearestNeighborResponse::clear_timing_data_in_micro() {
  if (GetArenaNoVirtual() == nullptr && timing_data_in_micro_ != nullptr) {
    delete timing_data_in_micro_;
  }
  timing_data_in_micro_ = nullptr;
}
inline const ::bucket::TimingDataInMicro& NearestNeighborResponse::_internal_timing_data_in_micro() const {
  const ::bucket::TimingDataInMicro* p = timing_data_in_micro_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bucket::TimingDataInMicro*>(
      &::bucket::_TimingDataInMicro_default_instance_);
}
inline const ::bucket::TimingDataInMicro& NearestNeighborResponse::timing_data_in_micro() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.timing_data_in_micro)
  return _internal_timing_data_in_micro();
}
inline ::bucket::TimingDataInMicro* NearestNeighborResponse::release_timing_data_in_micro() {
  // @@protoc_insertion_point(field_release:bucket.NearestNeighborResponse.timing_data_in_micro)
  
  ::bucket::TimingDataInMicro* temp = timing_data_in_micro_;
  timing_data_in_micro_ = nullptr;
  return temp;
}
inline ::bucket::TimingDataInMicro* NearestNeighborResponse::_internal_mutable_timing_data_in_micro() {
  
  if (timing_data_in_micro_ == nullptr) {
    auto* p = CreateMaybeMessage<::bucket::TimingDataInMicro>(GetArenaNoVirtual());
    timing_data_in_micro_ = p;
  }
  return timing_data_in_micro_;
}
inline ::bucket::TimingDataInMicro* NearestNeighborResponse::mutable_timing_data_in_micro() {
  // @@protoc_insertion_point(field_mutable:bucket.NearestNeighborResponse.timing_data_in_micro)
  return _internal_mutable_timing_data_in_micro();
}
inline void NearestNeighborResponse::set_allocated_timing_data_in_micro(::bucket::TimingDataInMicro* timing_data_in_micro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timing_data_in_micro_;
  }
  if (timing_data_in_micro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timing_data_in_micro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timing_data_in_micro, submessage_arena);
    }
    
  } else {
    
  }
  timing_data_in_micro_ = timing_data_in_micro;
  // @@protoc_insertion_point(field_set_allocated:bucket.NearestNeighborResponse.timing_data_in_micro)
}

// .bucket.UtilResponse util_response = 4;
inline bool NearestNeighborResponse::_internal_has_util_response() const {
  return this != internal_default_instance() && util_response_ != nullptr;
}
inline bool NearestNeighborResponse::has_util_response() const {
  return _internal_has_util_response();
}
inline void NearestNeighborResponse::clear_util_response() {
  if (GetArenaNoVirtual() == nullptr && util_response_ != nullptr) {
    delete util_response_;
  }
  util_response_ = nullptr;
}
inline const ::bucket::UtilResponse& NearestNeighborResponse::_internal_util_response() const {
  const ::bucket::UtilResponse* p = util_response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bucket::UtilResponse*>(
      &::bucket::_UtilResponse_default_instance_);
}
inline const ::bucket::UtilResponse& NearestNeighborResponse::util_response() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.util_response)
  return _internal_util_response();
}
inline ::bucket::UtilResponse* NearestNeighborResponse::release_util_response() {
  // @@protoc_insertion_point(field_release:bucket.NearestNeighborResponse.util_response)
  
  ::bucket::UtilResponse* temp = util_response_;
  util_response_ = nullptr;
  return temp;
}
inline ::bucket::UtilResponse* NearestNeighborResponse::_internal_mutable_util_response() {
  
  if (util_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::bucket::UtilResponse>(GetArenaNoVirtual());
    util_response_ = p;
  }
  return util_response_;
}
inline ::bucket::UtilResponse* NearestNeighborResponse::mutable_util_response() {
  // @@protoc_insertion_point(field_mutable:bucket.NearestNeighborResponse.util_response)
  return _internal_mutable_util_response();
}
inline void NearestNeighborResponse::set_allocated_util_response(::bucket::UtilResponse* util_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete util_response_;
  }
  if (util_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      util_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, util_response, submessage_arena);
    }
    
  } else {
    
  }
  util_response_ = util_response;
  // @@protoc_insertion_point(field_set_allocated:bucket.NearestNeighborResponse.util_response)
}

// uint64 request_id = 5;
inline void NearestNeighborResponse::clear_request_id() {
  request_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::request_id() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.request_id)
  return _internal_request_id();
}
inline void NearestNeighborResponse::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  request_id_ = value;
}
inline void NearestNeighborResponse::set_request_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborResponse.request_id)
}

// uint64 recv_stamp = 6;
inline void NearestNeighborResponse::clear_recv_stamp() {
  recv_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::_internal_recv_stamp() const {
  return recv_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::recv_stamp() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.recv_stamp)
  return _internal_recv_stamp();
}
inline void NearestNeighborResponse::_internal_set_recv_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  recv_stamp_ = value;
}
inline void NearestNeighborResponse::set_recv_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_recv_stamp(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborResponse.recv_stamp)
}

// uint64 send_stamp = 7;
inline void NearestNeighborResponse::clear_send_stamp() {
  send_stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::_internal_send_stamp() const {
  return send_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::send_stamp() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.send_stamp)
  return _internal_send_stamp();
}
inline void NearestNeighborResponse::_internal_set_send_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  send_stamp_ = value;
}
inline void NearestNeighborResponse::set_send_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_send_stamp(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborResponse.send_stamp)
}

// uint64 index_view = 8;
inline void NearestNeighborResponse::clear_index_view() {
  index_view_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::_internal_index_view() const {
  return index_view_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NearestNeighborResponse::index_view() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.index_view)
  return _internal_index_view();
}
inline void NearestNeighborResponse::_internal_set_index_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_view_ = value;
}
inline void NearestNeighborResponse::set_index_view(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index_view(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborResponse.index_view)
}

// uint32 bucket_server_id = 9;
inline void NearestNeighborResponse::clear_bucket_server_id() {
  bucket_server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearestNeighborResponse::_internal_bucket_server_id() const {
  return bucket_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NearestNeighborResponse::bucket_server_id() const {
  // @@protoc_insertion_point(field_get:bucket.NearestNeighborResponse.bucket_server_id)
  return _internal_bucket_server_id();
}
inline void NearestNeighborResponse::_internal_set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bucket_server_id_ = value;
}
inline void NearestNeighborResponse::set_bucket_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bucket_server_id(value);
  // @@protoc_insertion_point(field_set:bucket.NearestNeighborResponse.bucket_server_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bucket

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bucket_2eproto
