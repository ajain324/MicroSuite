// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bucket.proto

#include "bucket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bucket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPoint_bucket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bucket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointIdList_bucket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bucket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimingDataInMicro_bucket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bucket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtilRequest_bucket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bucket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtilResponse_bucket_2eproto;
namespace bucket {
class DataPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPoint> _instance;
} _DataPoint_default_instance_;
class MultipleDataPointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultipleDataPoints> _instance;
} _MultipleDataPoints_default_instance_;
class PointIdListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PointIdList> _instance;
} _PointIdList_default_instance_;
class UtilRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UtilRequest> _instance;
} _UtilRequest_default_instance_;
class NearestNeighborRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearestNeighborRequest> _instance;
} _NearestNeighborRequest_default_instance_;
class TimingDataInMicroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimingDataInMicro> _instance;
} _TimingDataInMicro_default_instance_;
class UtilResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UtilResponse> _instance;
} _UtilResponse_default_instance_;
class NearestNeighborResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearestNeighborResponse> _instance;
} _NearestNeighborResponse_default_instance_;
}  // namespace bucket
static void InitDefaultsscc_info_DataPoint_bucket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bucket::_DataPoint_default_instance_;
    new (ptr) ::bucket::DataPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bucket::DataPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPoint_bucket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataPoint_bucket_2eproto}, {}};

static void InitDefaultsscc_info_MultipleDataPoints_bucket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bucket::_MultipleDataPoints_default_instance_;
    new (ptr) ::bucket::MultipleDataPoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bucket::MultipleDataPoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultipleDataPoints_bucket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultipleDataPoints_bucket_2eproto}, {
      &scc_info_DataPoint_bucket_2eproto.base,}};

static void InitDefaultsscc_info_NearestNeighborRequest_bucket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bucket::_NearestNeighborRequest_default_instance_;
    new (ptr) ::bucket::NearestNeighborRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bucket::NearestNeighborRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NearestNeighborRequest_bucket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NearestNeighborRequest_bucket_2eproto}, {
      &scc_info_PointIdList_bucket_2eproto.base,
      &scc_info_UtilRequest_bucket_2eproto.base,}};

static void InitDefaultsscc_info_NearestNeighborResponse_bucket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bucket::_NearestNeighborResponse_default_instance_;
    new (ptr) ::bucket::NearestNeighborResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bucket::NearestNeighborResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NearestNeighborResponse_bucket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NearestNeighborResponse_bucket_2eproto}, {
      &scc_info_PointIdList_bucket_2eproto.base,
      &scc_info_TimingDataInMicro_bucket_2eproto.base,
      &scc_info_UtilResponse_bucket_2eproto.base,}};

static void InitDefaultsscc_info_PointIdList_bucket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bucket::_PointIdList_default_instance_;
    new (ptr) ::bucket::PointIdList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bucket::PointIdList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointIdList_bucket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PointIdList_bucket_2eproto}, {}};

static void InitDefaultsscc_info_TimingDataInMicro_bucket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bucket::_TimingDataInMicro_default_instance_;
    new (ptr) ::bucket::TimingDataInMicro();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bucket::TimingDataInMicro::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimingDataInMicro_bucket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimingDataInMicro_bucket_2eproto}, {}};

static void InitDefaultsscc_info_UtilRequest_bucket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bucket::_UtilRequest_default_instance_;
    new (ptr) ::bucket::UtilRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bucket::UtilRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtilRequest_bucket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UtilRequest_bucket_2eproto}, {}};

static void InitDefaultsscc_info_UtilResponse_bucket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bucket::_UtilResponse_default_instance_;
    new (ptr) ::bucket::UtilResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bucket::UtilResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtilResponse_bucket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UtilResponse_bucket_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bucket_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bucket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bucket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bucket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bucket::DataPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bucket::DataPoint, data_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bucket::MultipleDataPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bucket::MultipleDataPoints, multiple_data_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bucket::PointIdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bucket::PointIdList, point_id_),
  PROTOBUF_FIELD_OFFSET(::bucket::PointIdList, bucket_server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bucket::UtilRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bucket::UtilRequest, util_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, queries_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, maybe_neighbor_list_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, requested_neighbor_count_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, bucket_server_id_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, shard_size_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, util_request_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborRequest, index_view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bucket::TimingDataInMicro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bucket::TimingDataInMicro, unpack_bucket_req_time_in_micro_),
  PROTOBUF_FIELD_OFFSET(::bucket::TimingDataInMicro, calculate_knn_time_in_micro_),
  PROTOBUF_FIELD_OFFSET(::bucket::TimingDataInMicro, pack_bucket_resp_time_in_micro_),
  PROTOBUF_FIELD_OFFSET(::bucket::TimingDataInMicro, cpu_util_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bucket::UtilResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bucket::UtilResponse, util_present_),
  PROTOBUF_FIELD_OFFSET(::bucket::UtilResponse, user_time_),
  PROTOBUF_FIELD_OFFSET(::bucket::UtilResponse, system_time_),
  PROTOBUF_FIELD_OFFSET(::bucket::UtilResponse, io_time_),
  PROTOBUF_FIELD_OFFSET(::bucket::UtilResponse, idle_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, neighbor_ids_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, queries_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, timing_data_in_micro_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, util_response_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, recv_stamp_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, send_stamp_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, index_view_),
  PROTOBUF_FIELD_OFFSET(::bucket::NearestNeighborResponse, bucket_server_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bucket::DataPoint)},
  { 6, -1, sizeof(::bucket::MultipleDataPoints)},
  { 12, -1, sizeof(::bucket::PointIdList)},
  { 19, -1, sizeof(::bucket::UtilRequest)},
  { 25, -1, sizeof(::bucket::NearestNeighborRequest)},
  { 38, -1, sizeof(::bucket::TimingDataInMicro)},
  { 47, -1, sizeof(::bucket::UtilResponse)},
  { 57, -1, sizeof(::bucket::NearestNeighborResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bucket::_DataPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bucket::_MultipleDataPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bucket::_PointIdList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bucket::_UtilRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bucket::_NearestNeighborRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bucket::_TimingDataInMicro_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bucket::_UtilResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bucket::_NearestNeighborResponse_default_instance_),
};

const char descriptor_table_protodef_bucket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014bucket.proto\022\006bucket\"\037\n\tDataPoint\022\022\n\nd"
  "ata_point\030\001 \003(\002\"E\n\022MultipleDataPoints\022/\n"
  "\024multiple_data_points\030\001 \003(\0132\021.bucket.Dat"
  "aPoint\"9\n\013PointIdList\022\020\n\010point_id\030\001 \003(\r\022"
  "\030\n\020bucket_server_id\030\002 \001(\r\"#\n\013UtilRequest"
  "\022\024\n\014util_request\030\001 \001(\010\"\376\001\n\026NearestNeighb"
  "orRequest\022\017\n\007queries\030\001 \003(\004\0220\n\023maybe_neig"
  "hbor_list\030\002 \003(\0132\023.bucket.PointIdList\022 \n\030"
  "requested_neighbor_count\030\003 \001(\r\022\030\n\020bucket"
  "_server_id\030\004 \001(\r\022\022\n\nshard_size\030\005 \001(\r\022)\n\014"
  "util_request\030\006 \001(\0132\023.bucket.UtilRequest\022"
  "\022\n\nrequest_id\030\007 \001(\004\022\022\n\nindex_view\030\010 \001(\004\""
  "\233\001\n\021TimingDataInMicro\022\'\n\037unpack_bucket_r"
  "eq_time_in_micro\030\001 \001(\004\022#\n\033calculate_knn_"
  "time_in_micro\030\002 \001(\004\022&\n\036pack_bucket_resp_"
  "time_in_micro\030\003 \001(\004\022\020\n\010cpu_util\030\004 \001(\002\"p\n"
  "\014UtilResponse\022\024\n\014util_present\030\001 \001(\010\022\021\n\tu"
  "ser_time\030\002 \001(\004\022\023\n\013system_time\030\003 \001(\004\022\017\n\007i"
  "o_time\030\004 \001(\004\022\021\n\tidle_time\030\005 \001(\004\"\245\002\n\027Near"
  "estNeighborResponse\022)\n\014neighbor_ids\030\001 \003("
  "\0132\023.bucket.PointIdList\022\017\n\007queries\030\002 \003(\004\022"
  "7\n\024timing_data_in_micro\030\003 \001(\0132\031.bucket.T"
  "imingDataInMicro\022+\n\rutil_response\030\004 \001(\0132"
  "\024.bucket.UtilResponse\022\022\n\nrequest_id\030\005 \001("
  "\004\022\022\n\nrecv_stamp\030\006 \001(\004\022\022\n\nsend_stamp\030\007 \001("
  "\004\022\022\n\nindex_view\030\010 \001(\004\022\030\n\020bucket_server_i"
  "d\030\t \001(\r2k\n\017DistanceService\022X\n\023GetNearest"
  "Neighbors\022\036.bucket.NearestNeighborReques"
  "t\032\037.bucket.NearestNeighborResponse\"\000b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bucket_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bucket_2eproto_sccs[8] = {
  &scc_info_DataPoint_bucket_2eproto.base,
  &scc_info_MultipleDataPoints_bucket_2eproto.base,
  &scc_info_NearestNeighborRequest_bucket_2eproto.base,
  &scc_info_NearestNeighborResponse_bucket_2eproto.base,
  &scc_info_PointIdList_bucket_2eproto.base,
  &scc_info_TimingDataInMicro_bucket_2eproto.base,
  &scc_info_UtilRequest_bucket_2eproto.base,
  &scc_info_UtilResponse_bucket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bucket_2eproto_once;
static bool descriptor_table_bucket_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bucket_2eproto = {
  &descriptor_table_bucket_2eproto_initialized, descriptor_table_protodef_bucket_2eproto, "bucket.proto", 1164,
  &descriptor_table_bucket_2eproto_once, descriptor_table_bucket_2eproto_sccs, descriptor_table_bucket_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_bucket_2eproto::offsets,
  file_level_metadata_bucket_2eproto, 8, file_level_enum_descriptors_bucket_2eproto, file_level_service_descriptors_bucket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bucket_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bucket_2eproto), true);
namespace bucket {

// ===================================================================

void DataPoint::InitAsDefaultInstance() {
}
class DataPoint::_Internal {
 public:
};

DataPoint::DataPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bucket.DataPoint)
}
DataPoint::DataPoint(const DataPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_point_(from.data_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bucket.DataPoint)
}

void DataPoint::SharedCtor() {
}

DataPoint::~DataPoint() {
  // @@protoc_insertion_point(destructor:bucket.DataPoint)
  SharedDtor();
}

void DataPoint::SharedDtor() {
}

void DataPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPoint& DataPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPoint_bucket_2eproto.base);
  return *internal_default_instance();
}


void DataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:bucket.DataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_point_.Clear();
  _internal_metadata_.Clear();
}

const char* DataPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float data_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data_point(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_data_point(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bucket.DataPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float data_point = 1;
  if (this->_internal_data_point_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bucket.DataPoint)
  return target;
}

size_t DataPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bucket.DataPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data_point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_point_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_point_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bucket.DataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bucket.DataPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bucket.DataPoint)
    MergeFrom(*source);
  }
}

void DataPoint::MergeFrom(const DataPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bucket.DataPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_point_.MergeFrom(from.data_point_);
}

void DataPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bucket.DataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPoint::CopyFrom(const DataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bucket.DataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPoint::IsInitialized() const {
  return true;
}

void DataPoint::InternalSwap(DataPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_point_.InternalSwap(&other->data_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultipleDataPoints::InitAsDefaultInstance() {
}
class MultipleDataPoints::_Internal {
 public:
};

MultipleDataPoints::MultipleDataPoints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bucket.MultipleDataPoints)
}
MultipleDataPoints::MultipleDataPoints(const MultipleDataPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      multiple_data_points_(from.multiple_data_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bucket.MultipleDataPoints)
}

void MultipleDataPoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultipleDataPoints_bucket_2eproto.base);
}

MultipleDataPoints::~MultipleDataPoints() {
  // @@protoc_insertion_point(destructor:bucket.MultipleDataPoints)
  SharedDtor();
}

void MultipleDataPoints::SharedDtor() {
}

void MultipleDataPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipleDataPoints& MultipleDataPoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultipleDataPoints_bucket_2eproto.base);
  return *internal_default_instance();
}


void MultipleDataPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:bucket.MultipleDataPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiple_data_points_.Clear();
  _internal_metadata_.Clear();
}

const char* MultipleDataPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bucket.DataPoint multiple_data_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multiple_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultipleDataPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bucket.MultipleDataPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bucket.DataPoint multiple_data_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multiple_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_multiple_data_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bucket.MultipleDataPoints)
  return target;
}

size_t MultipleDataPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bucket.MultipleDataPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bucket.DataPoint multiple_data_points = 1;
  total_size += 1UL * this->_internal_multiple_data_points_size();
  for (const auto& msg : this->multiple_data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipleDataPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bucket.MultipleDataPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipleDataPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultipleDataPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bucket.MultipleDataPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bucket.MultipleDataPoints)
    MergeFrom(*source);
  }
}

void MultipleDataPoints::MergeFrom(const MultipleDataPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bucket.MultipleDataPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiple_data_points_.MergeFrom(from.multiple_data_points_);
}

void MultipleDataPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bucket.MultipleDataPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipleDataPoints::CopyFrom(const MultipleDataPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bucket.MultipleDataPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleDataPoints::IsInitialized() const {
  return true;
}

void MultipleDataPoints::InternalSwap(MultipleDataPoints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  multiple_data_points_.InternalSwap(&other->multiple_data_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipleDataPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PointIdList::InitAsDefaultInstance() {
}
class PointIdList::_Internal {
 public:
};

PointIdList::PointIdList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bucket.PointIdList)
}
PointIdList::PointIdList(const PointIdList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      point_id_(from.point_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucket_server_id_ = from.bucket_server_id_;
  // @@protoc_insertion_point(copy_constructor:bucket.PointIdList)
}

void PointIdList::SharedCtor() {
  bucket_server_id_ = 0u;
}

PointIdList::~PointIdList() {
  // @@protoc_insertion_point(destructor:bucket.PointIdList)
  SharedDtor();
}

void PointIdList::SharedDtor() {
}

void PointIdList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PointIdList& PointIdList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PointIdList_bucket_2eproto.base);
  return *internal_default_instance();
}


void PointIdList::Clear() {
// @@protoc_insertion_point(message_clear_start:bucket.PointIdList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_id_.Clear();
  bucket_server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* PointIdList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 point_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_point_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_point_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bucket_server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bucket_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PointIdList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bucket.PointIdList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 point_id = 1;
  {
    int byte_size = _point_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_point_id(), byte_size, target);
    }
  }

  // uint32 bucket_server_id = 2;
  if (this->bucket_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bucket_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bucket.PointIdList)
  return target;
}

size_t PointIdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bucket.PointIdList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 point_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->point_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _point_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 bucket_server_id = 2;
  if (this->bucket_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bucket_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointIdList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bucket.PointIdList)
  GOOGLE_DCHECK_NE(&from, this);
  const PointIdList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PointIdList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bucket.PointIdList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bucket.PointIdList)
    MergeFrom(*source);
  }
}

void PointIdList::MergeFrom(const PointIdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bucket.PointIdList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_id_.MergeFrom(from.point_id_);
  if (from.bucket_server_id() != 0) {
    _internal_set_bucket_server_id(from._internal_bucket_server_id());
  }
}

void PointIdList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bucket.PointIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointIdList::CopyFrom(const PointIdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bucket.PointIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointIdList::IsInitialized() const {
  return true;
}

void PointIdList::InternalSwap(PointIdList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  point_id_.InternalSwap(&other->point_id_);
  swap(bucket_server_id_, other->bucket_server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointIdList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UtilRequest::InitAsDefaultInstance() {
}
class UtilRequest::_Internal {
 public:
};

UtilRequest::UtilRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bucket.UtilRequest)
}
UtilRequest::UtilRequest(const UtilRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  util_request_ = from.util_request_;
  // @@protoc_insertion_point(copy_constructor:bucket.UtilRequest)
}

void UtilRequest::SharedCtor() {
  util_request_ = false;
}

UtilRequest::~UtilRequest() {
  // @@protoc_insertion_point(destructor:bucket.UtilRequest)
  SharedDtor();
}

void UtilRequest::SharedDtor() {
}

void UtilRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UtilRequest& UtilRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UtilRequest_bucket_2eproto.base);
  return *internal_default_instance();
}


void UtilRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bucket.UtilRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  util_request_ = false;
  _internal_metadata_.Clear();
}

const char* UtilRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool util_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          util_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtilRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bucket.UtilRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_util_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bucket.UtilRequest)
  return target;
}

size_t UtilRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bucket.UtilRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtilRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bucket.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtilRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bucket.UtilRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bucket.UtilRequest)
    MergeFrom(*source);
  }
}

void UtilRequest::MergeFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bucket.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.util_request() != 0) {
    _internal_set_util_request(from._internal_util_request());
  }
}

void UtilRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bucket.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilRequest::CopyFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bucket.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilRequest::IsInitialized() const {
  return true;
}

void UtilRequest::InternalSwap(UtilRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(util_request_, other->util_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtilRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NearestNeighborRequest::InitAsDefaultInstance() {
  ::bucket::_NearestNeighborRequest_default_instance_._instance.get_mutable()->util_request_ = const_cast< ::bucket::UtilRequest*>(
      ::bucket::UtilRequest::internal_default_instance());
}
class NearestNeighborRequest::_Internal {
 public:
  static const ::bucket::UtilRequest& util_request(const NearestNeighborRequest* msg);
};

const ::bucket::UtilRequest&
NearestNeighborRequest::_Internal::util_request(const NearestNeighborRequest* msg) {
  return *msg->util_request_;
}
NearestNeighborRequest::NearestNeighborRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bucket.NearestNeighborRequest)
}
NearestNeighborRequest::NearestNeighborRequest(const NearestNeighborRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      queries_(from.queries_),
      maybe_neighbor_list_(from.maybe_neighbor_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_util_request()) {
    util_request_ = new ::bucket::UtilRequest(*from.util_request_);
  } else {
    util_request_ = nullptr;
  }
  ::memcpy(&requested_neighbor_count_, &from.requested_neighbor_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_size_) -
    reinterpret_cast<char*>(&requested_neighbor_count_)) + sizeof(shard_size_));
  // @@protoc_insertion_point(copy_constructor:bucket.NearestNeighborRequest)
}

void NearestNeighborRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NearestNeighborRequest_bucket_2eproto.base);
  ::memset(&util_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_size_) -
      reinterpret_cast<char*>(&util_request_)) + sizeof(shard_size_));
}

NearestNeighborRequest::~NearestNeighborRequest() {
  // @@protoc_insertion_point(destructor:bucket.NearestNeighborRequest)
  SharedDtor();
}

void NearestNeighborRequest::SharedDtor() {
  if (this != internal_default_instance()) delete util_request_;
}

void NearestNeighborRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearestNeighborRequest& NearestNeighborRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearestNeighborRequest_bucket_2eproto.base);
  return *internal_default_instance();
}


void NearestNeighborRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bucket.NearestNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  queries_.Clear();
  maybe_neighbor_list_.Clear();
  if (GetArenaNoVirtual() == nullptr && util_request_ != nullptr) {
    delete util_request_;
  }
  util_request_ = nullptr;
  ::memset(&requested_neighbor_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_size_) -
      reinterpret_cast<char*>(&requested_neighbor_count_)) + sizeof(shard_size_));
  _internal_metadata_.Clear();
}

const char* NearestNeighborRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 queries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_queries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_queries(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bucket.PointIdList maybe_neighbor_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maybe_neighbor_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 requested_neighbor_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          requested_neighbor_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bucket_server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bucket_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shard_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          shard_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bucket.UtilRequest util_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_util_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 request_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index_view = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          index_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NearestNeighborRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bucket.NearestNeighborRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 queries = 1;
  {
    int byte_size = _queries_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_queries(), byte_size, target);
    }
  }

  // repeated .bucket.PointIdList maybe_neighbor_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_maybe_neighbor_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_maybe_neighbor_list(i), target, stream);
  }

  // uint32 requested_neighbor_count = 3;
  if (this->requested_neighbor_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_requested_neighbor_count(), target);
  }

  // uint32 bucket_server_id = 4;
  if (this->bucket_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bucket_server_id(), target);
  }

  // uint32 shard_size = 5;
  if (this->shard_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_shard_size(), target);
  }

  // .bucket.UtilRequest util_request = 6;
  if (this->has_util_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::util_request(this), target, stream);
  }

  // uint64 request_id = 7;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_request_id(), target);
  }

  // uint64 index_view = 8;
  if (this->index_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_index_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bucket.NearestNeighborRequest)
  return target;
}

size_t NearestNeighborRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bucket.NearestNeighborRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 queries = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->queries_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _queries_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .bucket.PointIdList maybe_neighbor_list = 2;
  total_size += 1UL * this->_internal_maybe_neighbor_list_size();
  for (const auto& msg : this->maybe_neighbor_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bucket.UtilRequest util_request = 6;
  if (this->has_util_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *util_request_);
  }

  // uint32 requested_neighbor_count = 3;
  if (this->requested_neighbor_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requested_neighbor_count());
  }

  // uint32 bucket_server_id = 4;
  if (this->bucket_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bucket_server_id());
  }

  // uint64 request_id = 7;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  // uint64 index_view = 8;
  if (this->index_view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index_view());
  }

  // uint32 shard_size = 5;
  if (this->shard_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shard_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearestNeighborRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bucket.NearestNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestNeighborRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearestNeighborRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bucket.NearestNeighborRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bucket.NearestNeighborRequest)
    MergeFrom(*source);
  }
}

void NearestNeighborRequest::MergeFrom(const NearestNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bucket.NearestNeighborRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  queries_.MergeFrom(from.queries_);
  maybe_neighbor_list_.MergeFrom(from.maybe_neighbor_list_);
  if (from.has_util_request()) {
    _internal_mutable_util_request()->::bucket::UtilRequest::MergeFrom(from._internal_util_request());
  }
  if (from.requested_neighbor_count() != 0) {
    _internal_set_requested_neighbor_count(from._internal_requested_neighbor_count());
  }
  if (from.bucket_server_id() != 0) {
    _internal_set_bucket_server_id(from._internal_bucket_server_id());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.index_view() != 0) {
    _internal_set_index_view(from._internal_index_view());
  }
  if (from.shard_size() != 0) {
    _internal_set_shard_size(from._internal_shard_size());
  }
}

void NearestNeighborRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bucket.NearestNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestNeighborRequest::CopyFrom(const NearestNeighborRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bucket.NearestNeighborRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestNeighborRequest::IsInitialized() const {
  return true;
}

void NearestNeighborRequest::InternalSwap(NearestNeighborRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  queries_.InternalSwap(&other->queries_);
  maybe_neighbor_list_.InternalSwap(&other->maybe_neighbor_list_);
  swap(util_request_, other->util_request_);
  swap(requested_neighbor_count_, other->requested_neighbor_count_);
  swap(bucket_server_id_, other->bucket_server_id_);
  swap(request_id_, other->request_id_);
  swap(index_view_, other->index_view_);
  swap(shard_size_, other->shard_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearestNeighborRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimingDataInMicro::InitAsDefaultInstance() {
}
class TimingDataInMicro::_Internal {
 public:
};

TimingDataInMicro::TimingDataInMicro()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bucket.TimingDataInMicro)
}
TimingDataInMicro::TimingDataInMicro(const TimingDataInMicro& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unpack_bucket_req_time_in_micro_, &from.unpack_bucket_req_time_in_micro_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_util_) -
    reinterpret_cast<char*>(&unpack_bucket_req_time_in_micro_)) + sizeof(cpu_util_));
  // @@protoc_insertion_point(copy_constructor:bucket.TimingDataInMicro)
}

void TimingDataInMicro::SharedCtor() {
  ::memset(&unpack_bucket_req_time_in_micro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_util_) -
      reinterpret_cast<char*>(&unpack_bucket_req_time_in_micro_)) + sizeof(cpu_util_));
}

TimingDataInMicro::~TimingDataInMicro() {
  // @@protoc_insertion_point(destructor:bucket.TimingDataInMicro)
  SharedDtor();
}

void TimingDataInMicro::SharedDtor() {
}

void TimingDataInMicro::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimingDataInMicro& TimingDataInMicro::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimingDataInMicro_bucket_2eproto.base);
  return *internal_default_instance();
}


void TimingDataInMicro::Clear() {
// @@protoc_insertion_point(message_clear_start:bucket.TimingDataInMicro)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unpack_bucket_req_time_in_micro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_util_) -
      reinterpret_cast<char*>(&unpack_bucket_req_time_in_micro_)) + sizeof(cpu_util_));
  _internal_metadata_.Clear();
}

const char* TimingDataInMicro::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 unpack_bucket_req_time_in_micro = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unpack_bucket_req_time_in_micro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 calculate_knn_time_in_micro = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          calculate_knn_time_in_micro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pack_bucket_resp_time_in_micro = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pack_bucket_resp_time_in_micro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cpu_util = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cpu_util_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimingDataInMicro::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bucket.TimingDataInMicro)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 unpack_bucket_req_time_in_micro = 1;
  if (this->unpack_bucket_req_time_in_micro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unpack_bucket_req_time_in_micro(), target);
  }

  // uint64 calculate_knn_time_in_micro = 2;
  if (this->calculate_knn_time_in_micro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_calculate_knn_time_in_micro(), target);
  }

  // uint64 pack_bucket_resp_time_in_micro = 3;
  if (this->pack_bucket_resp_time_in_micro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pack_bucket_resp_time_in_micro(), target);
  }

  // float cpu_util = 4;
  if (!(this->cpu_util() <= 0 && this->cpu_util() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cpu_util(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bucket.TimingDataInMicro)
  return target;
}

size_t TimingDataInMicro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bucket.TimingDataInMicro)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 unpack_bucket_req_time_in_micro = 1;
  if (this->unpack_bucket_req_time_in_micro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unpack_bucket_req_time_in_micro());
  }

  // uint64 calculate_knn_time_in_micro = 2;
  if (this->calculate_knn_time_in_micro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_calculate_knn_time_in_micro());
  }

  // uint64 pack_bucket_resp_time_in_micro = 3;
  if (this->pack_bucket_resp_time_in_micro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_bucket_resp_time_in_micro());
  }

  // float cpu_util = 4;
  if (!(this->cpu_util() <= 0 && this->cpu_util() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimingDataInMicro::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bucket.TimingDataInMicro)
  GOOGLE_DCHECK_NE(&from, this);
  const TimingDataInMicro* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimingDataInMicro>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bucket.TimingDataInMicro)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bucket.TimingDataInMicro)
    MergeFrom(*source);
  }
}

void TimingDataInMicro::MergeFrom(const TimingDataInMicro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bucket.TimingDataInMicro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unpack_bucket_req_time_in_micro() != 0) {
    _internal_set_unpack_bucket_req_time_in_micro(from._internal_unpack_bucket_req_time_in_micro());
  }
  if (from.calculate_knn_time_in_micro() != 0) {
    _internal_set_calculate_knn_time_in_micro(from._internal_calculate_knn_time_in_micro());
  }
  if (from.pack_bucket_resp_time_in_micro() != 0) {
    _internal_set_pack_bucket_resp_time_in_micro(from._internal_pack_bucket_resp_time_in_micro());
  }
  if (!(from.cpu_util() <= 0 && from.cpu_util() >= 0)) {
    _internal_set_cpu_util(from._internal_cpu_util());
  }
}

void TimingDataInMicro::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bucket.TimingDataInMicro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimingDataInMicro::CopyFrom(const TimingDataInMicro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bucket.TimingDataInMicro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingDataInMicro::IsInitialized() const {
  return true;
}

void TimingDataInMicro::InternalSwap(TimingDataInMicro* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(unpack_bucket_req_time_in_micro_, other->unpack_bucket_req_time_in_micro_);
  swap(calculate_knn_time_in_micro_, other->calculate_knn_time_in_micro_);
  swap(pack_bucket_resp_time_in_micro_, other->pack_bucket_resp_time_in_micro_);
  swap(cpu_util_, other->cpu_util_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimingDataInMicro::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UtilResponse::InitAsDefaultInstance() {
}
class UtilResponse::_Internal {
 public:
};

UtilResponse::UtilResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bucket.UtilResponse)
}
UtilResponse::UtilResponse(const UtilResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_time_, &from.user_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&user_time_)) + sizeof(util_present_));
  // @@protoc_insertion_point(copy_constructor:bucket.UtilResponse)
}

void UtilResponse::SharedCtor() {
  ::memset(&user_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&util_present_) -
      reinterpret_cast<char*>(&user_time_)) + sizeof(util_present_));
}

UtilResponse::~UtilResponse() {
  // @@protoc_insertion_point(destructor:bucket.UtilResponse)
  SharedDtor();
}

void UtilResponse::SharedDtor() {
}

void UtilResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UtilResponse& UtilResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UtilResponse_bucket_2eproto.base);
  return *internal_default_instance();
}


void UtilResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bucket.UtilResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&util_present_) -
      reinterpret_cast<char*>(&user_time_)) + sizeof(util_present_));
  _internal_metadata_.Clear();
}

const char* UtilResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool util_present = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          util_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 system_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          system_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 io_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          io_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 idle_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtilResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bucket.UtilResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool util_present = 1;
  if (this->util_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_util_present(), target);
  }

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_time(), target);
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_system_time(), target);
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_io_time(), target);
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_idle_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bucket.UtilResponse)
  return target;
}

size_t UtilResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bucket.UtilResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_time());
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_system_time());
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_io_time());
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idle_time());
  }

  // bool util_present = 1;
  if (this->util_present() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtilResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bucket.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtilResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bucket.UtilResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bucket.UtilResponse)
    MergeFrom(*source);
  }
}

void UtilResponse::MergeFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bucket.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_time() != 0) {
    _internal_set_user_time(from._internal_user_time());
  }
  if (from.system_time() != 0) {
    _internal_set_system_time(from._internal_system_time());
  }
  if (from.io_time() != 0) {
    _internal_set_io_time(from._internal_io_time());
  }
  if (from.idle_time() != 0) {
    _internal_set_idle_time(from._internal_idle_time());
  }
  if (from.util_present() != 0) {
    _internal_set_util_present(from._internal_util_present());
  }
}

void UtilResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bucket.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilResponse::CopyFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bucket.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilResponse::IsInitialized() const {
  return true;
}

void UtilResponse::InternalSwap(UtilResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_time_, other->user_time_);
  swap(system_time_, other->system_time_);
  swap(io_time_, other->io_time_);
  swap(idle_time_, other->idle_time_);
  swap(util_present_, other->util_present_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtilResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NearestNeighborResponse::InitAsDefaultInstance() {
  ::bucket::_NearestNeighborResponse_default_instance_._instance.get_mutable()->timing_data_in_micro_ = const_cast< ::bucket::TimingDataInMicro*>(
      ::bucket::TimingDataInMicro::internal_default_instance());
  ::bucket::_NearestNeighborResponse_default_instance_._instance.get_mutable()->util_response_ = const_cast< ::bucket::UtilResponse*>(
      ::bucket::UtilResponse::internal_default_instance());
}
class NearestNeighborResponse::_Internal {
 public:
  static const ::bucket::TimingDataInMicro& timing_data_in_micro(const NearestNeighborResponse* msg);
  static const ::bucket::UtilResponse& util_response(const NearestNeighborResponse* msg);
};

const ::bucket::TimingDataInMicro&
NearestNeighborResponse::_Internal::timing_data_in_micro(const NearestNeighborResponse* msg) {
  return *msg->timing_data_in_micro_;
}
const ::bucket::UtilResponse&
NearestNeighborResponse::_Internal::util_response(const NearestNeighborResponse* msg) {
  return *msg->util_response_;
}
NearestNeighborResponse::NearestNeighborResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bucket.NearestNeighborResponse)
}
NearestNeighborResponse::NearestNeighborResponse(const NearestNeighborResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      neighbor_ids_(from.neighbor_ids_),
      queries_(from.queries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_timing_data_in_micro()) {
    timing_data_in_micro_ = new ::bucket::TimingDataInMicro(*from.timing_data_in_micro_);
  } else {
    timing_data_in_micro_ = nullptr;
  }
  if (from._internal_has_util_response()) {
    util_response_ = new ::bucket::UtilResponse(*from.util_response_);
  } else {
    util_response_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_server_id_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(bucket_server_id_));
  // @@protoc_insertion_point(copy_constructor:bucket.NearestNeighborResponse)
}

void NearestNeighborResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NearestNeighborResponse_bucket_2eproto.base);
  ::memset(&timing_data_in_micro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_server_id_) -
      reinterpret_cast<char*>(&timing_data_in_micro_)) + sizeof(bucket_server_id_));
}

NearestNeighborResponse::~NearestNeighborResponse() {
  // @@protoc_insertion_point(destructor:bucket.NearestNeighborResponse)
  SharedDtor();
}

void NearestNeighborResponse::SharedDtor() {
  if (this != internal_default_instance()) delete timing_data_in_micro_;
  if (this != internal_default_instance()) delete util_response_;
}

void NearestNeighborResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearestNeighborResponse& NearestNeighborResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearestNeighborResponse_bucket_2eproto.base);
  return *internal_default_instance();
}


void NearestNeighborResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bucket.NearestNeighborResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbor_ids_.Clear();
  queries_.Clear();
  if (GetArenaNoVirtual() == nullptr && timing_data_in_micro_ != nullptr) {
    delete timing_data_in_micro_;
  }
  timing_data_in_micro_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && util_response_ != nullptr) {
    delete util_response_;
  }
  util_response_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_server_id_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(bucket_server_id_));
  _internal_metadata_.Clear();
}

const char* NearestNeighborResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bucket.PointIdList neighbor_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neighbor_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 queries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_queries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_queries(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bucket.TimingDataInMicro timing_data_in_micro = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing_data_in_micro(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bucket.UtilResponse util_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_util_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 request_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 recv_stamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          recv_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 send_stamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          send_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index_view = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          index_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bucket_server_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          bucket_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NearestNeighborResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bucket.NearestNeighborResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bucket.PointIdList neighbor_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neighbor_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_neighbor_ids(i), target, stream);
  }

  // repeated uint64 queries = 2;
  {
    int byte_size = _queries_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_queries(), byte_size, target);
    }
  }

  // .bucket.TimingDataInMicro timing_data_in_micro = 3;
  if (this->has_timing_data_in_micro()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timing_data_in_micro(this), target, stream);
  }

  // .bucket.UtilResponse util_response = 4;
  if (this->has_util_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::util_response(this), target, stream);
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_request_id(), target);
  }

  // uint64 recv_stamp = 6;
  if (this->recv_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_recv_stamp(), target);
  }

  // uint64 send_stamp = 7;
  if (this->send_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_send_stamp(), target);
  }

  // uint64 index_view = 8;
  if (this->index_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_index_view(), target);
  }

  // uint32 bucket_server_id = 9;
  if (this->bucket_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_bucket_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bucket.NearestNeighborResponse)
  return target;
}

size_t NearestNeighborResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bucket.NearestNeighborResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bucket.PointIdList neighbor_ids = 1;
  total_size += 1UL * this->_internal_neighbor_ids_size();
  for (const auto& msg : this->neighbor_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 queries = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->queries_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _queries_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bucket.TimingDataInMicro timing_data_in_micro = 3;
  if (this->has_timing_data_in_micro()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_data_in_micro_);
  }

  // .bucket.UtilResponse util_response = 4;
  if (this->has_util_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *util_response_);
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  // uint64 recv_stamp = 6;
  if (this->recv_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recv_stamp());
  }

  // uint64 send_stamp = 7;
  if (this->send_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send_stamp());
  }

  // uint64 index_view = 8;
  if (this->index_view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index_view());
  }

  // uint32 bucket_server_id = 9;
  if (this->bucket_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bucket_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearestNeighborResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bucket.NearestNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestNeighborResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearestNeighborResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bucket.NearestNeighborResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bucket.NearestNeighborResponse)
    MergeFrom(*source);
  }
}

void NearestNeighborResponse::MergeFrom(const NearestNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bucket.NearestNeighborResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbor_ids_.MergeFrom(from.neighbor_ids_);
  queries_.MergeFrom(from.queries_);
  if (from.has_timing_data_in_micro()) {
    _internal_mutable_timing_data_in_micro()->::bucket::TimingDataInMicro::MergeFrom(from._internal_timing_data_in_micro());
  }
  if (from.has_util_response()) {
    _internal_mutable_util_response()->::bucket::UtilResponse::MergeFrom(from._internal_util_response());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.recv_stamp() != 0) {
    _internal_set_recv_stamp(from._internal_recv_stamp());
  }
  if (from.send_stamp() != 0) {
    _internal_set_send_stamp(from._internal_send_stamp());
  }
  if (from.index_view() != 0) {
    _internal_set_index_view(from._internal_index_view());
  }
  if (from.bucket_server_id() != 0) {
    _internal_set_bucket_server_id(from._internal_bucket_server_id());
  }
}

void NearestNeighborResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bucket.NearestNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestNeighborResponse::CopyFrom(const NearestNeighborResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bucket.NearestNeighborResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestNeighborResponse::IsInitialized() const {
  return true;
}

void NearestNeighborResponse::InternalSwap(NearestNeighborResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neighbor_ids_.InternalSwap(&other->neighbor_ids_);
  queries_.InternalSwap(&other->queries_);
  swap(timing_data_in_micro_, other->timing_data_in_micro_);
  swap(util_response_, other->util_response_);
  swap(request_id_, other->request_id_);
  swap(recv_stamp_, other->recv_stamp_);
  swap(send_stamp_, other->send_stamp_);
  swap(index_view_, other->index_view_);
  swap(bucket_server_id_, other->bucket_server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearestNeighborResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace bucket
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bucket::DataPoint* Arena::CreateMaybeMessage< ::bucket::DataPoint >(Arena* arena) {
  return Arena::CreateInternal< ::bucket::DataPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::bucket::MultipleDataPoints* Arena::CreateMaybeMessage< ::bucket::MultipleDataPoints >(Arena* arena) {
  return Arena::CreateInternal< ::bucket::MultipleDataPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::bucket::PointIdList* Arena::CreateMaybeMessage< ::bucket::PointIdList >(Arena* arena) {
  return Arena::CreateInternal< ::bucket::PointIdList >(arena);
}
template<> PROTOBUF_NOINLINE ::bucket::UtilRequest* Arena::CreateMaybeMessage< ::bucket::UtilRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bucket::UtilRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bucket::NearestNeighborRequest* Arena::CreateMaybeMessage< ::bucket::NearestNeighborRequest >(Arena* arena) {
  return Arena::CreateInternal< ::bucket::NearestNeighborRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bucket::TimingDataInMicro* Arena::CreateMaybeMessage< ::bucket::TimingDataInMicro >(Arena* arena) {
  return Arena::CreateInternal< ::bucket::TimingDataInMicro >(arena);
}
template<> PROTOBUF_NOINLINE ::bucket::UtilResponse* Arena::CreateMaybeMessage< ::bucket::UtilResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bucket::UtilResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bucket::NearestNeighborResponse* Arena::CreateMaybeMessage< ::bucket::NearestNeighborResponse >(Arena* arena) {
  return Arena::CreateInternal< ::bucket::NearestNeighborResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
