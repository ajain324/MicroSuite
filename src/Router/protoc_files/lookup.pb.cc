// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lookup.proto

#include "lookup.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_lookup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimingDataInMicro_lookup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lookup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtilRequest_lookup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lookup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtilResponse_lookup_2eproto;
namespace lookup {
class UtilRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UtilRequest> _instance;
} _UtilRequest_default_instance_;
class KeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Key> _instance;
} _Key_default_instance_;
class TimingDataInMicroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimingDataInMicro> _instance;
} _TimingDataInMicro_default_instance_;
class UtilResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UtilResponse> _instance;
} _UtilResponse_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Value> _instance;
} _Value_default_instance_;
}  // namespace lookup
static void InitDefaultsscc_info_Key_lookup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lookup::_Key_default_instance_;
    new (ptr) ::lookup::Key();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lookup::Key::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Key_lookup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Key_lookup_2eproto}, {
      &scc_info_UtilRequest_lookup_2eproto.base,}};

static void InitDefaultsscc_info_TimingDataInMicro_lookup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lookup::_TimingDataInMicro_default_instance_;
    new (ptr) ::lookup::TimingDataInMicro();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lookup::TimingDataInMicro::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimingDataInMicro_lookup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimingDataInMicro_lookup_2eproto}, {}};

static void InitDefaultsscc_info_UtilRequest_lookup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lookup::_UtilRequest_default_instance_;
    new (ptr) ::lookup::UtilRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lookup::UtilRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtilRequest_lookup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UtilRequest_lookup_2eproto}, {}};

static void InitDefaultsscc_info_UtilResponse_lookup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lookup::_UtilResponse_default_instance_;
    new (ptr) ::lookup::UtilResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lookup::UtilResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UtilResponse_lookup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UtilResponse_lookup_2eproto}, {}};

static void InitDefaultsscc_info_Value_lookup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lookup::_Value_default_instance_;
    new (ptr) ::lookup::Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lookup::Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Value_lookup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Value_lookup_2eproto}, {
      &scc_info_TimingDataInMicro_lookup_2eproto.base,
      &scc_info_UtilResponse_lookup_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lookup_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lookup_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lookup_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lookup_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lookup::UtilRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lookup::UtilRequest, util_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lookup::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lookup::Key, operation_),
  PROTOBUF_FIELD_OFFSET(::lookup::Key, key_),
  PROTOBUF_FIELD_OFFSET(::lookup::Key, value_),
  PROTOBUF_FIELD_OFFSET(::lookup::Key, util_request_),
  PROTOBUF_FIELD_OFFSET(::lookup::Key, request_id_),
  PROTOBUF_FIELD_OFFSET(::lookup::Key, index_view_),
  PROTOBUF_FIELD_OFFSET(::lookup::Key, lookup_server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lookup::TimingDataInMicro, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lookup::TimingDataInMicro, unpack_lookup_srv_req_time_in_micro_),
  PROTOBUF_FIELD_OFFSET(::lookup::TimingDataInMicro, lookup_srv_time_in_micro_),
  PROTOBUF_FIELD_OFFSET(::lookup::TimingDataInMicro, pack_lookup_srv_resp_time_in_micro_),
  PROTOBUF_FIELD_OFFSET(::lookup::TimingDataInMicro, cpu_util_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lookup::UtilResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lookup::UtilResponse, util_present_),
  PROTOBUF_FIELD_OFFSET(::lookup::UtilResponse, user_time_),
  PROTOBUF_FIELD_OFFSET(::lookup::UtilResponse, system_time_),
  PROTOBUF_FIELD_OFFSET(::lookup::UtilResponse, io_time_),
  PROTOBUF_FIELD_OFFSET(::lookup::UtilResponse, idle_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lookup::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lookup::Value, value_),
  PROTOBUF_FIELD_OFFSET(::lookup::Value, timing_data_in_micro_),
  PROTOBUF_FIELD_OFFSET(::lookup::Value, util_response_),
  PROTOBUF_FIELD_OFFSET(::lookup::Value, request_id_),
  PROTOBUF_FIELD_OFFSET(::lookup::Value, recv_stamp_),
  PROTOBUF_FIELD_OFFSET(::lookup::Value, send_stamp_),
  PROTOBUF_FIELD_OFFSET(::lookup::Value, index_view_),
  PROTOBUF_FIELD_OFFSET(::lookup::Value, bucket_server_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lookup::UtilRequest)},
  { 6, -1, sizeof(::lookup::Key)},
  { 18, -1, sizeof(::lookup::TimingDataInMicro)},
  { 27, -1, sizeof(::lookup::UtilResponse)},
  { 37, -1, sizeof(::lookup::Value)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lookup::_UtilRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lookup::_Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lookup::_TimingDataInMicro_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lookup::_UtilResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lookup::_Value_default_instance_),
};

const char descriptor_table_protodef_lookup_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014lookup.proto\022\006lookup\"#\n\013UtilRequest\022\024\n"
  "\014util_request\030\001 \001(\010\"\241\001\n\003Key\022\021\n\toperation"
  "\030\001 \001(\r\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022)\n\014ut"
  "il_request\030\004 \001(\0132\023.lookup.UtilRequest\022\022\n"
  "\nrequest_id\030\005 \001(\004\022\022\n\nindex_view\030\006 \001(\004\022\030\n"
  "\020lookup_server_id\030\007 \001(\r\"\240\001\n\021TimingDataIn"
  "Micro\022+\n#unpack_lookup_srv_req_time_in_m"
  "icro\030\001 \001(\004\022 \n\030lookup_srv_time_in_micro\030\002"
  " \001(\004\022*\n\"pack_lookup_srv_resp_time_in_mic"
  "ro\030\003 \001(\004\022\020\n\010cpu_util\030\004 \001(\002\"p\n\014UtilRespon"
  "se\022\024\n\014util_present\030\001 \001(\010\022\021\n\tuser_time\030\002 "
  "\001(\004\022\023\n\013system_time\030\003 \001(\004\022\017\n\007io_time\030\004 \001("
  "\004\022\021\n\tidle_time\030\005 \001(\004\"\346\001\n\005Value\022\r\n\005value\030"
  "\001 \001(\t\0227\n\024timing_data_in_micro\030\002 \001(\0132\031.lo"
  "okup.TimingDataInMicro\022+\n\rutil_response\030"
  "\003 \001(\0132\024.lookup.UtilResponse\022\022\n\nrequest_i"
  "d\030\004 \001(\004\022\022\n\nrecv_stamp\030\005 \001(\004\022\022\n\nsend_stam"
  "p\030\006 \001(\004\022\022\n\nindex_view\030\007 \001(\004\022\030\n\020bucket_se"
  "rver_id\030\010 \001(\r2:\n\rLookupService\022)\n\tKeyLoo"
  "kup\022\013.lookup.Key\032\r.lookup.Value\"\000b\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lookup_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_lookup_2eproto_sccs[5] = {
  &scc_info_Key_lookup_2eproto.base,
  &scc_info_TimingDataInMicro_lookup_2eproto.base,
  &scc_info_UtilRequest_lookup_2eproto.base,
  &scc_info_UtilResponse_lookup_2eproto.base,
  &scc_info_Value_lookup_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lookup_2eproto_once;
static bool descriptor_table_lookup_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lookup_2eproto = {
  &descriptor_table_lookup_2eproto_initialized, descriptor_table_protodef_lookup_2eproto, "lookup.proto", 801,
  &descriptor_table_lookup_2eproto_once, descriptor_table_lookup_2eproto_sccs, descriptor_table_lookup_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_lookup_2eproto::offsets,
  file_level_metadata_lookup_2eproto, 5, file_level_enum_descriptors_lookup_2eproto, file_level_service_descriptors_lookup_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_lookup_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_lookup_2eproto), true);
namespace lookup {

// ===================================================================

void UtilRequest::InitAsDefaultInstance() {
}
class UtilRequest::_Internal {
 public:
};

UtilRequest::UtilRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.UtilRequest)
}
UtilRequest::UtilRequest(const UtilRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  util_request_ = from.util_request_;
  // @@protoc_insertion_point(copy_constructor:lookup.UtilRequest)
}

void UtilRequest::SharedCtor() {
  util_request_ = false;
}

UtilRequest::~UtilRequest() {
  // @@protoc_insertion_point(destructor:lookup.UtilRequest)
  SharedDtor();
}

void UtilRequest::SharedDtor() {
}

void UtilRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UtilRequest& UtilRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UtilRequest_lookup_2eproto.base);
  return *internal_default_instance();
}


void UtilRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.UtilRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  util_request_ = false;
  _internal_metadata_.Clear();
}

const char* UtilRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool util_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          util_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtilRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lookup.UtilRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_util_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lookup.UtilRequest)
  return target;
}

size_t UtilRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.UtilRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool util_request = 1;
  if (this->util_request() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtilRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtilRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.UtilRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.UtilRequest)
    MergeFrom(*source);
  }
}

void UtilRequest::MergeFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.UtilRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.util_request() != 0) {
    _internal_set_util_request(from._internal_util_request());
  }
}

void UtilRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilRequest::CopyFrom(const UtilRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.UtilRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilRequest::IsInitialized() const {
  return true;
}

void UtilRequest::InternalSwap(UtilRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(util_request_, other->util_request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtilRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Key::InitAsDefaultInstance() {
  ::lookup::_Key_default_instance_._instance.get_mutable()->util_request_ = const_cast< ::lookup::UtilRequest*>(
      ::lookup::UtilRequest::internal_default_instance());
}
class Key::_Internal {
 public:
  static const ::lookup::UtilRequest& util_request(const Key* msg);
};

const ::lookup::UtilRequest&
Key::_Internal::util_request(const Key* msg) {
  return *msg->util_request_;
}
Key::Key()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.Key)
}
Key::Key(const Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from._internal_has_util_request()) {
    util_request_ = new ::lookup::UtilRequest(*from.util_request_);
  } else {
    util_request_ = nullptr;
  }
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_view_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(index_view_));
  // @@protoc_insertion_point(copy_constructor:lookup.Key)
}

void Key::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Key_lookup_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&util_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_view_) -
      reinterpret_cast<char*>(&util_request_)) + sizeof(index_view_));
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:lookup.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete util_request_;
}

void Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Key& Key::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Key_lookup_2eproto.base);
  return *internal_default_instance();
}


void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && util_request_ != nullptr) {
    delete util_request_;
  }
  util_request_ = nullptr;
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_view_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(index_view_));
  _internal_metadata_.Clear();
}

const char* Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lookup.Key.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lookup.Key.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lookup.UtilRequest util_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_util_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 request_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index_view = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          index_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lookup_server_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lookup_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Key::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lookup.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 operation = 1;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_operation(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lookup.Key.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lookup.Key.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // .lookup.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::util_request(this), target, stream);
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_request_id(), target);
  }

  // uint64 index_view = 6;
  if (this->index_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_index_view(), target);
  }

  // uint32 lookup_server_id = 7;
  if (this->lookup_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lookup_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lookup.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.Key)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .lookup.UtilRequest util_request = 4;
  if (this->has_util_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *util_request_);
  }

  // uint32 operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operation());
  }

  // uint32 lookup_server_id = 7;
  if (this->lookup_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lookup_server_id());
  }

  // uint64 request_id = 5;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  // uint64 index_view = 6;
  if (this->index_view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index_view());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.Key)
  GOOGLE_DCHECK_NE(&from, this);
  const Key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.Key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_util_request()) {
    _internal_mutable_util_request()->::lookup::UtilRequest::MergeFrom(from._internal_util_request());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from.lookup_server_id() != 0) {
    _internal_set_lookup_server_id(from._internal_lookup_server_id());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.index_view() != 0) {
    _internal_set_index_view(from._internal_index_view());
  }
}

void Key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::InternalSwap(Key* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(util_request_, other->util_request_);
  swap(operation_, other->operation_);
  swap(lookup_server_id_, other->lookup_server_id_);
  swap(request_id_, other->request_id_);
  swap(index_view_, other->index_view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimingDataInMicro::InitAsDefaultInstance() {
}
class TimingDataInMicro::_Internal {
 public:
};

TimingDataInMicro::TimingDataInMicro()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.TimingDataInMicro)
}
TimingDataInMicro::TimingDataInMicro(const TimingDataInMicro& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unpack_lookup_srv_req_time_in_micro_, &from.unpack_lookup_srv_req_time_in_micro_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_util_) -
    reinterpret_cast<char*>(&unpack_lookup_srv_req_time_in_micro_)) + sizeof(cpu_util_));
  // @@protoc_insertion_point(copy_constructor:lookup.TimingDataInMicro)
}

void TimingDataInMicro::SharedCtor() {
  ::memset(&unpack_lookup_srv_req_time_in_micro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_util_) -
      reinterpret_cast<char*>(&unpack_lookup_srv_req_time_in_micro_)) + sizeof(cpu_util_));
}

TimingDataInMicro::~TimingDataInMicro() {
  // @@protoc_insertion_point(destructor:lookup.TimingDataInMicro)
  SharedDtor();
}

void TimingDataInMicro::SharedDtor() {
}

void TimingDataInMicro::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimingDataInMicro& TimingDataInMicro::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimingDataInMicro_lookup_2eproto.base);
  return *internal_default_instance();
}


void TimingDataInMicro::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.TimingDataInMicro)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unpack_lookup_srv_req_time_in_micro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_util_) -
      reinterpret_cast<char*>(&unpack_lookup_srv_req_time_in_micro_)) + sizeof(cpu_util_));
  _internal_metadata_.Clear();
}

const char* TimingDataInMicro::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 unpack_lookup_srv_req_time_in_micro = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unpack_lookup_srv_req_time_in_micro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lookup_srv_time_in_micro = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lookup_srv_time_in_micro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pack_lookup_srv_resp_time_in_micro = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pack_lookup_srv_resp_time_in_micro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float cpu_util = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          cpu_util_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimingDataInMicro::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lookup.TimingDataInMicro)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 unpack_lookup_srv_req_time_in_micro = 1;
  if (this->unpack_lookup_srv_req_time_in_micro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unpack_lookup_srv_req_time_in_micro(), target);
  }

  // uint64 lookup_srv_time_in_micro = 2;
  if (this->lookup_srv_time_in_micro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lookup_srv_time_in_micro(), target);
  }

  // uint64 pack_lookup_srv_resp_time_in_micro = 3;
  if (this->pack_lookup_srv_resp_time_in_micro() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_pack_lookup_srv_resp_time_in_micro(), target);
  }

  // float cpu_util = 4;
  if (!(this->cpu_util() <= 0 && this->cpu_util() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cpu_util(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lookup.TimingDataInMicro)
  return target;
}

size_t TimingDataInMicro::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.TimingDataInMicro)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 unpack_lookup_srv_req_time_in_micro = 1;
  if (this->unpack_lookup_srv_req_time_in_micro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unpack_lookup_srv_req_time_in_micro());
  }

  // uint64 lookup_srv_time_in_micro = 2;
  if (this->lookup_srv_time_in_micro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lookup_srv_time_in_micro());
  }

  // uint64 pack_lookup_srv_resp_time_in_micro = 3;
  if (this->pack_lookup_srv_resp_time_in_micro() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pack_lookup_srv_resp_time_in_micro());
  }

  // float cpu_util = 4;
  if (!(this->cpu_util() <= 0 && this->cpu_util() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimingDataInMicro::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.TimingDataInMicro)
  GOOGLE_DCHECK_NE(&from, this);
  const TimingDataInMicro* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimingDataInMicro>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.TimingDataInMicro)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.TimingDataInMicro)
    MergeFrom(*source);
  }
}

void TimingDataInMicro::MergeFrom(const TimingDataInMicro& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.TimingDataInMicro)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unpack_lookup_srv_req_time_in_micro() != 0) {
    _internal_set_unpack_lookup_srv_req_time_in_micro(from._internal_unpack_lookup_srv_req_time_in_micro());
  }
  if (from.lookup_srv_time_in_micro() != 0) {
    _internal_set_lookup_srv_time_in_micro(from._internal_lookup_srv_time_in_micro());
  }
  if (from.pack_lookup_srv_resp_time_in_micro() != 0) {
    _internal_set_pack_lookup_srv_resp_time_in_micro(from._internal_pack_lookup_srv_resp_time_in_micro());
  }
  if (!(from.cpu_util() <= 0 && from.cpu_util() >= 0)) {
    _internal_set_cpu_util(from._internal_cpu_util());
  }
}

void TimingDataInMicro::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.TimingDataInMicro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimingDataInMicro::CopyFrom(const TimingDataInMicro& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.TimingDataInMicro)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimingDataInMicro::IsInitialized() const {
  return true;
}

void TimingDataInMicro::InternalSwap(TimingDataInMicro* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(unpack_lookup_srv_req_time_in_micro_, other->unpack_lookup_srv_req_time_in_micro_);
  swap(lookup_srv_time_in_micro_, other->lookup_srv_time_in_micro_);
  swap(pack_lookup_srv_resp_time_in_micro_, other->pack_lookup_srv_resp_time_in_micro_);
  swap(cpu_util_, other->cpu_util_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimingDataInMicro::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UtilResponse::InitAsDefaultInstance() {
}
class UtilResponse::_Internal {
 public:
};

UtilResponse::UtilResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.UtilResponse)
}
UtilResponse::UtilResponse(const UtilResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_time_, &from.user_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&util_present_) -
    reinterpret_cast<char*>(&user_time_)) + sizeof(util_present_));
  // @@protoc_insertion_point(copy_constructor:lookup.UtilResponse)
}

void UtilResponse::SharedCtor() {
  ::memset(&user_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&util_present_) -
      reinterpret_cast<char*>(&user_time_)) + sizeof(util_present_));
}

UtilResponse::~UtilResponse() {
  // @@protoc_insertion_point(destructor:lookup.UtilResponse)
  SharedDtor();
}

void UtilResponse::SharedDtor() {
}

void UtilResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UtilResponse& UtilResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UtilResponse_lookup_2eproto.base);
  return *internal_default_instance();
}


void UtilResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.UtilResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&util_present_) -
      reinterpret_cast<char*>(&user_time_)) + sizeof(util_present_));
  _internal_metadata_.Clear();
}

const char* UtilResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool util_present = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          util_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 system_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          system_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 io_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          io_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 idle_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UtilResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lookup.UtilResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool util_present = 1;
  if (this->util_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_util_present(), target);
  }

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_time(), target);
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_system_time(), target);
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_io_time(), target);
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_idle_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lookup.UtilResponse)
  return target;
}

size_t UtilResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.UtilResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_time = 2;
  if (this->user_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_time());
  }

  // uint64 system_time = 3;
  if (this->system_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_system_time());
  }

  // uint64 io_time = 4;
  if (this->io_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_io_time());
  }

  // uint64 idle_time = 5;
  if (this->idle_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_idle_time());
  }

  // bool util_present = 1;
  if (this->util_present() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UtilResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UtilResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UtilResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.UtilResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.UtilResponse)
    MergeFrom(*source);
  }
}

void UtilResponse::MergeFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.UtilResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_time() != 0) {
    _internal_set_user_time(from._internal_user_time());
  }
  if (from.system_time() != 0) {
    _internal_set_system_time(from._internal_system_time());
  }
  if (from.io_time() != 0) {
    _internal_set_io_time(from._internal_io_time());
  }
  if (from.idle_time() != 0) {
    _internal_set_idle_time(from._internal_idle_time());
  }
  if (from.util_present() != 0) {
    _internal_set_util_present(from._internal_util_present());
  }
}

void UtilResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UtilResponse::CopyFrom(const UtilResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.UtilResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UtilResponse::IsInitialized() const {
  return true;
}

void UtilResponse::InternalSwap(UtilResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(user_time_, other->user_time_);
  swap(system_time_, other->system_time_);
  swap(io_time_, other->io_time_);
  swap(idle_time_, other->idle_time_);
  swap(util_present_, other->util_present_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UtilResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::lookup::_Value_default_instance_._instance.get_mutable()->timing_data_in_micro_ = const_cast< ::lookup::TimingDataInMicro*>(
      ::lookup::TimingDataInMicro::internal_default_instance());
  ::lookup::_Value_default_instance_._instance.get_mutable()->util_response_ = const_cast< ::lookup::UtilResponse*>(
      ::lookup::UtilResponse::internal_default_instance());
}
class Value::_Internal {
 public:
  static const ::lookup::TimingDataInMicro& timing_data_in_micro(const Value* msg);
  static const ::lookup::UtilResponse& util_response(const Value* msg);
};

const ::lookup::TimingDataInMicro&
Value::_Internal::timing_data_in_micro(const Value* msg) {
  return *msg->timing_data_in_micro_;
}
const ::lookup::UtilResponse&
Value::_Internal::util_response(const Value* msg) {
  return *msg->util_response_;
}
Value::Value()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lookup.Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from._internal_has_timing_data_in_micro()) {
    timing_data_in_micro_ = new ::lookup::TimingDataInMicro(*from.timing_data_in_micro_);
  } else {
    timing_data_in_micro_ = nullptr;
  }
  if (from._internal_has_util_response()) {
    util_response_ = new ::lookup::UtilResponse(*from.util_response_);
  } else {
    util_response_ = nullptr;
  }
  ::memcpy(&request_id_, &from.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bucket_server_id_) -
    reinterpret_cast<char*>(&request_id_)) + sizeof(bucket_server_id_));
  // @@protoc_insertion_point(copy_constructor:lookup.Value)
}

void Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Value_lookup_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timing_data_in_micro_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_server_id_) -
      reinterpret_cast<char*>(&timing_data_in_micro_)) + sizeof(bucket_server_id_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:lookup.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timing_data_in_micro_;
  if (this != internal_default_instance()) delete util_response_;
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Value_lookup_2eproto.base);
  return *internal_default_instance();
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:lookup.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timing_data_in_micro_ != nullptr) {
    delete timing_data_in_micro_;
  }
  timing_data_in_micro_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && util_response_ != nullptr) {
    delete util_response_;
  }
  util_response_ = nullptr;
  ::memset(&request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_server_id_) -
      reinterpret_cast<char*>(&request_id_)) + sizeof(bucket_server_id_));
  _internal_metadata_.Clear();
}

const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lookup.Value.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lookup.TimingDataInMicro timing_data_in_micro = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timing_data_in_micro(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lookup.UtilResponse util_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_util_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 recv_stamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          recv_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 send_stamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          send_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index_view = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          index_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bucket_server_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bucket_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lookup.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lookup.Value.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .lookup.TimingDataInMicro timing_data_in_micro = 2;
  if (this->has_timing_data_in_micro()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timing_data_in_micro(this), target, stream);
  }

  // .lookup.UtilResponse util_response = 3;
  if (this->has_util_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::util_response(this), target, stream);
  }

  // uint64 request_id = 4;
  if (this->request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_request_id(), target);
  }

  // uint64 recv_stamp = 5;
  if (this->recv_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_recv_stamp(), target);
  }

  // uint64 send_stamp = 6;
  if (this->send_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_send_stamp(), target);
  }

  // uint64 index_view = 7;
  if (this->index_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_index_view(), target);
  }

  // uint32 bucket_server_id = 8;
  if (this->bucket_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_bucket_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lookup.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lookup.Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .lookup.TimingDataInMicro timing_data_in_micro = 2;
  if (this->has_timing_data_in_micro()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timing_data_in_micro_);
  }

  // .lookup.UtilResponse util_response = 3;
  if (this->has_util_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *util_response_);
  }

  // uint64 request_id = 4;
  if (this->request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_request_id());
  }

  // uint64 recv_stamp = 5;
  if (this->recv_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_recv_stamp());
  }

  // uint64 send_stamp = 6;
  if (this->send_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send_stamp());
  }

  // uint64 index_view = 7;
  if (this->index_view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index_view());
  }

  // uint32 bucket_server_id = 8;
  if (this->bucket_server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bucket_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lookup.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lookup.Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lookup.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lookup.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_timing_data_in_micro()) {
    _internal_mutable_timing_data_in_micro()->::lookup::TimingDataInMicro::MergeFrom(from._internal_timing_data_in_micro());
  }
  if (from.has_util_response()) {
    _internal_mutable_util_response()->::lookup::UtilResponse::MergeFrom(from._internal_util_response());
  }
  if (from.request_id() != 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.recv_stamp() != 0) {
    _internal_set_recv_stamp(from._internal_recv_stamp());
  }
  if (from.send_stamp() != 0) {
    _internal_set_send_stamp(from._internal_send_stamp());
  }
  if (from.index_view() != 0) {
    _internal_set_index_view(from._internal_index_view());
  }
  if (from.bucket_server_id() != 0) {
    _internal_set_bucket_server_id(from._internal_bucket_server_id());
  }
}

void Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lookup.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lookup.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timing_data_in_micro_, other->timing_data_in_micro_);
  swap(util_response_, other->util_response_);
  swap(request_id_, other->request_id_);
  swap(recv_stamp_, other->recv_stamp_);
  swap(send_stamp_, other->send_stamp_);
  swap(index_view_, other->index_view_);
  swap(bucket_server_id_, other->bucket_server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lookup
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lookup::UtilRequest* Arena::CreateMaybeMessage< ::lookup::UtilRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lookup::UtilRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lookup::Key* Arena::CreateMaybeMessage< ::lookup::Key >(Arena* arena) {
  return Arena::CreateInternal< ::lookup::Key >(arena);
}
template<> PROTOBUF_NOINLINE ::lookup::TimingDataInMicro* Arena::CreateMaybeMessage< ::lookup::TimingDataInMicro >(Arena* arena) {
  return Arena::CreateInternal< ::lookup::TimingDataInMicro >(arena);
}
template<> PROTOBUF_NOINLINE ::lookup::UtilResponse* Arena::CreateMaybeMessage< ::lookup::UtilResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lookup::UtilResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lookup::Value* Arena::CreateMaybeMessage< ::lookup::Value >(Arena* arena) {
  return Arena::CreateInternal< ::lookup::Value >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
